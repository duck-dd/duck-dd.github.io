<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Duck</title>
    <link>https://duck-dd.github.io/</link>
    <description>Recent content on Duck</description>
    <image>
      <title>Duck</title>
      <url>https://duck-dd.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://duck-dd.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- 0.147.8</generator>
    <language>en</language>
    <lastBuildDate>Tue, 19 Aug 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://duck-dd.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>越南</title>
      <link>https://duck-dd.github.io/posts/%E8%B6%8A%E5%8D%97/</link>
      <pubDate>Tue, 19 Aug 2025 00:00:00 +0000</pubDate>
      <guid>https://duck-dd.github.io/posts/%E8%B6%8A%E5%8D%97/</guid>
      <description>&lt;p&gt;今天简单了解一下越南。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;名称：越南 越南社会主义共和国 Vietnam&lt;/li&gt;
&lt;li&gt;语言：越南语&lt;/li&gt;
&lt;li&gt;首都：河内(Ha Noi)&lt;/li&gt;
&lt;li&gt;国土面积：&lt;code&gt;33万&lt;/code&gt;平方公里&lt;/li&gt;
&lt;li&gt;位置：中南半岛东部&lt;/li&gt;
&lt;li&gt;气候：热带季风气候；高温多雨，北方分春、夏、秋、冬四季，南方雨旱两季分明&lt;/li&gt;
&lt;li&gt;邻(近)国：北与中国接壤，西与老挝、柬埔寨交界，东和南 临南海&lt;/li&gt;
&lt;li&gt;人口：&lt;code&gt;1亿&lt;/code&gt;多一点&lt;/li&gt;
&lt;li&gt;政治体制：一党制，越南共产党是越南唯一的政党&lt;/li&gt;
&lt;li&gt;经济制度：社会主义定向的市场经济制度&lt;/li&gt;
&lt;li&gt;社会制度：社会主义制度&lt;/li&gt;
&lt;li&gt;货币：越南盾，简称越盾，货币代码VND，货币符号 &amp;ldquo;₫&amp;rdquo;&lt;/li&gt;
&lt;li&gt;GDP：
&lt;ul&gt;
&lt;li&gt;2024：&lt;code&gt;11.511万亿&lt;/code&gt;越盾，约合&lt;code&gt;4763亿&lt;/code&gt;美元&lt;/li&gt;
&lt;li&gt;对比中国，2024 中国大陆名义GDP总量折合&lt;code&gt;189433.42亿&lt;/code&gt;美元&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;立法：国会是越南的国家最高权力机关，也是全国唯一的立法机构&lt;/li&gt;
&lt;li&gt;文化：越南文化融合了本土、中国影响、东南亚民族特色、殖民影响等因素；传统服饰：奥黛&lt;/li&gt;
&lt;li&gt;宗教信仰：佛教、天主教、和好教、高台教&lt;/li&gt;
&lt;li&gt;美食：以 “新鲜、清淡、均衡” 为核心，充满东南亚风情与中国饮食痕迹，使用筷子；“鲜 香 酸 辣”；河粉、春卷&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;国家内部 行政区域/地理区域 划分&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;省/直辖市 &amp;mdash;&amp;gt; 县/市社/郡 &amp;mdash;&amp;gt; 社(农村)/市镇(介于农村和城市之间)/坊(城市)&lt;/li&gt;
&lt;li&gt;全国划分为28个省和6个直辖市(河内市、胡志明市、海防市、岘港市、芹苴市和顺化市)&lt;/li&gt;
&lt;li&gt;主要城市：
&lt;ul&gt;
&lt;li&gt;河内市(Hà Nội, HN)：首都，越南政治、文化中心&lt;/li&gt;
&lt;li&gt;胡志明市(Thành phố Hồ Chí Minh, HCM)：旧称西贡，是越南的经济中心、全国最大的港口和交通枢纽，位于湄公河三角洲的东北侧、南临南中国海&lt;/li&gt;
&lt;li&gt;海防：越南北部最大港口城市，位于红河三角洲东北端，京泰河下游，东临北部湾&lt;/li&gt;
&lt;li&gt;岘港：位于越南中部，濒临南海，是全国重要的工业城市和海港&lt;/li&gt;
&lt;li&gt;芹苴：在后江省南面，下辖4郡4县，是湄公河三角洲上最大的城市，是南部湄公河三角洲农产品集散地和轻工业基地&lt;/li&gt;
&lt;li&gt;顺化：位于越南中部，是越南古都&lt;/li&gt;
&lt;li&gt;下龙(这个不是直辖市)：广宁省省会，位于北部湾的西岸，濒临下龙湾，是越南著名的旅游城市和重要海港，也是越南乃至东南亚的煤都；其著名景点下龙湾有着“海上桂林”的美誉&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;历史进程简述&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;红河三角洲地区早在新石器时代就有人类活动，公元前3世纪出现“瓯雒国”（传说由骆越部落建立），是越南最早的政权雏形&lt;/li&gt;
&lt;li&gt;公元前214年，秦始皇征服岭南，越南北部纳入中国版图，此后历经两汉、三国、隋唐等朝代，设 “交趾”“安南都护府” 等行政机构&lt;/li&gt;
&lt;li&gt;公元968年成为独立的封建国家，丁部领建立“丁朝”，定都华闾（今宁平省），正式脱离中国独立，称“大瞿越”，随后历经前黎朝、李朝、陈朝、胡朝、后黎朝等朝代&lt;/li&gt;
&lt;li&gt;1858年，法国以传教士问题为借口，逐步占领越南&lt;/li&gt;
&lt;li&gt;1887年，法国将越南与柬埔寨、老挝合并为 “法属印度支那联邦”，实行殖民统治，掠夺资源并推行西方化改革&lt;/li&gt;
&lt;li&gt;1930年，越南民族主义觉醒，胡志明等革命者成立“越南共产党”&lt;/li&gt;
&lt;li&gt;1940年，日本趁机占领越南，取代法国控制权，越南人民同时抗击法、日侵略&lt;/li&gt;
&lt;li&gt;1945年，“八月革命”后，胡志明宣布成立“越南民主共和国”（北越）；但法国试图重建殖民统治，引发“抗法战争”（1946—1954年）。1954年“奠边府战役”北越获胜，《日内瓦协定》签订，越南以北纬17度线分为北越（社会主义）和南越（资本主义）&lt;/li&gt;
&lt;li&gt;1955—1975年，南越在美国支持下成立政权，南北越矛盾激化。20世纪60年代，美国为遏制共产主义，逐步升级对越南的军事干预，发动“越南战争”（1961—1973年），美军最多投入50万兵力，战争造成巨大伤亡和破坏&lt;/li&gt;
&lt;li&gt;1973年，美军撤军&lt;/li&gt;
&lt;li&gt;1975年，北越军队攻占西贡（今胡志明市），南越政权覆灭&lt;/li&gt;
&lt;li&gt;1976年，越南正式统一，定国名为 “越南社会主义共和国”，定都河内&lt;/li&gt;
&lt;li&gt;1986年，越共六大推行 “革新开放” 政策，引入市场经济元素，吸引外资，发展出口加工产业，经济快速增长&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;额外说明：中国对越自卫反击战(苏联与越南签订军事同盟条约，试图通过越南牵制中国，形成对华战略包围圈)
&lt;ul&gt;
&lt;li&gt;作战阶段：1979年&lt;/li&gt;
&lt;li&gt;边境轮战阶段：1980-1989&lt;/li&gt;
&lt;li&gt;停战：1990越南主动寻求停战&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <title>印尼</title>
      <link>https://duck-dd.github.io/posts/%E5%8D%B0%E5%B0%BC/</link>
      <pubDate>Fri, 15 Aug 2025 00:00:00 +0000</pubDate>
      <guid>https://duck-dd.github.io/posts/%E5%8D%B0%E5%B0%BC/</guid>
      <description>&lt;p&gt;最近深度参与一些海外业务，今天了解一下印尼。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;名称：印度尼西亚 印尼 Indonesia&lt;/li&gt;
&lt;li&gt;语言：印度尼西亚语&lt;/li&gt;
&lt;li&gt;首都：雅加达(Jakarta，JKT) 逐步迁移至 努山塔拉(Ibu Kota Nusantara，缩写IKN)&lt;/li&gt;
&lt;li&gt;国土面积：&lt;code&gt;191.4万&lt;/code&gt;平方公里(陆) &lt;code&gt;316.6万&lt;/code&gt;平方公里(海)&lt;/li&gt;
&lt;li&gt;位置：亚洲东南部，太平洋印度洋之间&lt;/li&gt;
&lt;li&gt;气候：赤道海洋性气候；炎热，潮湿多雨；旱季6-9月，雨季12-3月&lt;/li&gt;
&lt;li&gt;邻(近)国：巴布亚新几内亚 东帝汶 马来西亚 泰国 新加坡 菲律宾 澳大利亚&lt;/li&gt;
&lt;li&gt;人口：约&lt;code&gt;3亿&lt;/code&gt; 世界第四&lt;/li&gt;
&lt;li&gt;政治体制：总统制共和制&lt;/li&gt;
&lt;li&gt;经济制度：市场经济体制&lt;/li&gt;
&lt;li&gt;社会制度：资本主义制度&lt;/li&gt;
&lt;li&gt;货币：印度尼西亚盾，简称印尼盾，货币代码&lt;code&gt;IDR&lt;/code&gt;，货币符号&lt;code&gt;RP&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;GDP：
&lt;ul&gt;
&lt;li&gt;2024：名义GDP为&lt;code&gt;22138.96万亿&lt;/code&gt;印尼盾，折合&lt;code&gt;13967.87亿&lt;/code&gt;美元&lt;/li&gt;
&lt;li&gt;对比中国，2024 中国大陆名义GDP总量折合&lt;code&gt;189433.42亿&lt;/code&gt;美元&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;立法：每个省有自己的立法机关&lt;/li&gt;
&lt;li&gt;文化：传统服饰“巴迪克”；舞蹈(巴厘舞，爪哇舞)；雕塑&lt;/li&gt;
&lt;li&gt;宗教信仰：伊斯兰教(87%) 基督教(6%) 天主教(3.6%)&lt;/li&gt;
&lt;li&gt;美食：沙嗲、印尼炒饭、gado-gado（什锦蔬菜沙拉）等；口味融合了甜、辣、酸等&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;国家内部 行政区域/地理区域 划分&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;省 &amp;mdash;&amp;gt; 县/市 &amp;mdash;&amp;gt; 区 &amp;mdash;&amp;gt; 村/社区&lt;/li&gt;
&lt;li&gt;38个省&lt;/li&gt;
&lt;li&gt;主要城市：
&lt;ul&gt;
&lt;li&gt;雅加达(Jakarta, JKT)：印尼最大的城市，位于爪哇岛西北部沿海&lt;/li&gt;
&lt;li&gt;泗水(Surabaya, SUB,SUR)：印尼第二大城市，东爪哇省的省会，位于爪哇岛东北沿海的泗水海峡西南侧&lt;/li&gt;
&lt;li&gt;万隆（Bandung, BDO）：西爪哇省的省会，位于爪哇岛西部的万隆盆地中&lt;/li&gt;
&lt;li&gt;棉兰（Medan, MES）：苏北省省会，位于苏门答腊岛北部，是苏门答腊岛最大城市&lt;/li&gt;
&lt;li&gt;三宝垄（Semarang, SRG,CGK）：中爪哇省的省会，位于爪哇岛中部北岸，是爪哇岛中部地区重要的交通枢纽及商品集散地&lt;/li&gt;
&lt;li&gt;望加锡（Makassar, MAK,UPG）：南苏拉威西省的省会，位于苏拉威西岛南端，是苏拉威西岛最大的城市&lt;/li&gt;
&lt;li&gt;登巴萨（Denpasar, DPS）：巴厘省的省会，位于巴厘岛南部，是巴厘岛的政治、经济和文化中心&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;历史进程简述&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;公元3-7世纪开始有部落记载&lt;/li&gt;
&lt;li&gt;13世纪末14世纪初，满者伯夷帝国在东爪哇建立&lt;/li&gt;
&lt;li&gt;1602年荷兰成立东印度公司，成为荷兰殖民地&lt;/li&gt;
&lt;li&gt;1942年日本入侵，印尼进入日本统治时期&lt;/li&gt;
&lt;li&gt;1945年8月15日，日本投降，苏加诺宣布印度尼西亚独立&lt;/li&gt;
&lt;li&gt;1949年12月，荷兰正式承认印尼独立&lt;/li&gt;
&lt;li&gt;1970年代后，从传统的计划经济向市场经济转变&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <title>目标管理法</title>
      <link>https://duck-dd.github.io/posts/%E7%9B%AE%E6%A0%87%E7%AE%A1%E7%90%86%E6%B3%95/</link>
      <pubDate>Wed, 13 Aug 2025 00:00:00 +0000</pubDate>
      <guid>https://duck-dd.github.io/posts/%E7%9B%AE%E6%A0%87%E7%AE%A1%E7%90%86%E6%B3%95/</guid>
      <description>&lt;p&gt;当我们写KPI时，我们在写什么？当我们写OKR时，我们在写什么？&lt;/p&gt;
&lt;p&gt;这个问题困扰了许久，从个人的角度，我一直把这些东西当成枷锁，今晚突然寻思，我为什么不能认真审视这个东西，既然总是要花精力来处理，那不如把这个工具用起来。
人都是渴望自由的，或者至少这么说，放纵总是使绝大多数人快乐的；所以前面我们说目标管理是一种枷锁，但是枷锁未必是坏的东西，它也可能是一种推你向上的动力。
在第一次工作中接触OKR时，我当天就给自己的生活也定了好几个OKR，虽然一个也没实现，但是却还是给了我一些挣扎的动力来往前走了几步。&lt;strong&gt;求其上者得其中，求其下者无所得&lt;/strong&gt;，希望无论是工作还是生活，我们能够永远保持对&lt;code&gt;O&lt;/code&gt;的无上憧憬。&lt;/p&gt;
&lt;h2 id=&#34;我理解的-okr&#34;&gt;我理解的 O+KR&lt;/h2&gt;
&lt;p&gt;对于&lt;code&gt;O&lt;/code&gt;，我认为就一个原则，把最终状态描述清楚，这个状态一般比较遥远(美好)但却不是遥不可及(务实)，精髓在于对于 &lt;strong&gt;遥远&lt;/strong&gt; 的把控。&lt;/p&gt;
&lt;p&gt;对于&lt;code&gt;KR&lt;/code&gt;，人们常说的最关键的特性就是，&lt;strong&gt;可量化&lt;/strong&gt;。一组&lt;code&gt;KR&lt;/code&gt;是达成一个O的具体行动指引list，每一个&lt;code&gt;KR&lt;/code&gt;的制定需要提前考虑好他的量化评估指标，每一个&lt;code&gt;KR&lt;/code&gt;是可评估的这样才能够保证&lt;code&gt;O&lt;/code&gt;是可评估的，那么这一组&lt;code&gt;OKR&lt;/code&gt;才是有意义的。&lt;/p&gt;
&lt;p&gt;举个简单的例子：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;O1: 我要做一个帅哥(这个O很美好，能够充分激发主观能动性(牛马工厂管这叫owner意识))
&lt;ul&gt;
&lt;li&gt;KR1: 八块腹肌(这个KR制定的很好，量化方式很简单)&lt;/li&gt;
&lt;li&gt;KR2: 皮肤状态变好(这个KR定的不好，“状态变好”很难量化，都不如改成12点前睡觉/一年用光一瓶洗面奶/每个月用完10片面膜)&lt;/li&gt;
&lt;li&gt;KR3: 搞个酷酷的发型(这个KR制定的也不太好，有一点过于具体了，很容易就做完了，这种应该是某一个KR里面的一个子项)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;smart目标法&#34;&gt;SMART目标法&lt;/h2&gt;
&lt;p&gt;下面记录巩固一下前人总结的制定目标的SMART法则(from 豆包)。&lt;/p&gt;
&lt;h3 id=&#34;sspecific明确具体&#34;&gt;S（Specific）：明确具体&lt;/h3&gt;
&lt;p&gt;目标必须清晰、具体，避免模糊笼统，明确 “做什么、谁来做、怎么做”。
反面示例：“提高业绩”（模糊，未明确提高多少、针对哪个业务）。
正面示例：“销售团队在第三季度将产品 A 的销售额提升 20%”（明确主体、对象、时间、指标）。&lt;/p&gt;
&lt;h3 id=&#34;mmeasurable可衡量&#34;&gt;M（Measurable）：可衡量&lt;/h3&gt;
&lt;p&gt;目标需有量化标准，便于跟踪进度和判断是否完成，避免 “完成了但说不清完成度” 的情况。
反面示例：“改善客户满意度”（无法量化 “改善” 的程度）。
正面示例：“通过季度调研，将客户满意度评分从 80 分提升至 90 分以上”（用具体分数衡量）。&lt;/p&gt;
&lt;h3 id=&#34;aachievable可实现&#34;&gt;A（Achievable）：可实现&lt;/h3&gt;
&lt;p&gt;目标需具有挑战性，但在现有资源（时间、能力、预算等）下可达成，避免因目标过高而失去动力，或过低而缺乏意义。
反面示例：“零基础 1 个月内成为 AI 专家”（资源和时间不匹配，难以实现）。
正面示例：“3 个月内通过系统学习，掌握 Python 基础编程并独立完成一个数据分析项目”（结合现有基础和学习路径，可实现）。&lt;/p&gt;
&lt;h3 id=&#34;rrelevant相关性&#34;&gt;R（Relevant）：相关性&lt;/h3&gt;
&lt;p&gt;目标需与个人 / 团队的核心目标、长期愿景相关联，确保资源投入有价值，避免偏离核心方向。
反面示例：“市场部花大量时间学习财务软件”（与市场部核心职责关联度低）。
正面示例：“市场部学习新媒体运营工具，提升短视频内容曝光量”（直接服务于 “扩大品牌影响力” 的核心目标）。&lt;/p&gt;
&lt;h3 id=&#34;ttime-bound有时限&#34;&gt;T（Time-bound）：有时限&lt;/h3&gt;
&lt;p&gt;目标必须设定明确的完成时间，避免无限期拖延，同时便于规划阶段任务。
反面示例：“完成产品迭代”（无时间限制，易导致进度松散）。
正面示例：“在 2024 年 12 月 31 日前完成 V2.0 版本的功能开发并上线”（明确截止时间，可拆分阶段任务）。&lt;/p&gt;</description>
    </item>
    <item>
      <title>About me</title>
      <link>https://duck-dd.github.io/about_me/</link>
      <pubDate>Fri, 08 Aug 2025 00:00:00 +0000</pubDate>
      <guid>https://duck-dd.github.io/about_me/</guid>
      <description>&lt;hr&gt;
&lt;h2 id=&#34;关于我&#34;&gt;关于我&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;为什么叫duck? duck=大可=奇, 即奇奇怪怪&lt;/li&gt;
&lt;li&gt;我从事的工作? 新时代民工&lt;/li&gt;
&lt;li&gt;我的爱好? um&amp;hellip;&lt;/li&gt;
&lt;li&gt;联系我? Email: &lt;a href=&#34;mailto:dianxinztq@126.com&#34;&gt;dianxinztq@126.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;我的原则&#34;&gt;我的原则&lt;/h2&gt;
&lt;p&gt;为什么要写我的原则？其实是为了装X&amp;hellip;搬砖时看到其他大佬在签名里放了这个东西广受好(诟)评(病)，调侃之余，希望借鉴一下，能够更规范的自我约束。&lt;/p&gt;
&lt;p&gt;一些广泛接受的观点是：&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;我们的一生，活的是无数个瞬间&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;大多数时候，选择比努力更重要&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;那么如何做到在那些重要时刻来临的时候能够冷静理智的出击呢，我能想到的就是在平时审视自己，正视自己，然后沉淀出一套自己的思考/行动依据，但知行合一何其不易啊，且行且思吧。&lt;/p&gt;
&lt;p&gt;以下原则有亲身感悟，也有纸上得来，共勉。&lt;/p&gt;
&lt;h3 id=&#34;与我&#34;&gt;与我&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;生命健康第一位，家庭第二位，工作第三位&lt;/li&gt;
&lt;li&gt;永远保持自我 &amp;mdash;&amp;mdash; 这并不代表自私，实现自我价值才能给身边人带来能量&lt;/li&gt;
&lt;li&gt;自己对自己的人生负责 &amp;mdash;&amp;mdash; 对自己负责是每个成年人的课题；老弟你记住，任何重大人生失败(失误)都只怪你自己，根本原因从不在外面(莫向外求)&lt;/li&gt;
&lt;li&gt;人无远虑，必有近忧 &amp;mdash;&amp;mdash; 千万别一生都在救火，最终一事无成&lt;/li&gt;
&lt;li&gt;弱小和无知不是生存的障碍，傲慢才是《三体》 &amp;mdash;&amp;mdash; 傲慢不仅是取得某些成就后的状态，也包括安于现状&lt;/li&gt;
&lt;li&gt;保持运动 &amp;mdash;&amp;mdash; 难在坚持&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;与家&#34;&gt;与家&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;和谐&amp;gt;是非 &amp;mdash;&amp;mdash; 道理能够指导我们做事，但确实不适合拿在家里来说事&lt;/li&gt;
&lt;li&gt;家庭/工作平衡 &amp;mdash;&amp;mdash; 又是每个成年人的课题(成年人太多课题了&amp;hellip;)&lt;/li&gt;
&lt;li&gt;尽量换位思考 &amp;mdash;&amp;mdash; 与家人的换位思考最容易被忽略，因为社会会教你做人，但家人通常会纵容以致放纵的人越来越放纵&lt;/li&gt;
&lt;li&gt;少说多做 &amp;mdash;&amp;mdash; 跟家人相处太随意，平常容易说下太多大话(指我自己)却最终没有兑现，所以，少说，多做&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;与事&#34;&gt;与事&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;是非&amp;gt;和谐(妥协) &amp;mdash;&amp;mdash; 别让一时的妥协换来无穷无尽的麻烦，学会拒绝&lt;/li&gt;
&lt;li&gt;简单化 &amp;mdash;&amp;mdash; 普通人处理的几乎所有事，没有难事，别妖魔化和复杂化这个世界&lt;/li&gt;
&lt;li&gt;在思考要不要做一件事的时候，想想自己如果不做，过一段时间，会不会有遗憾和悔恨 &amp;mdash;&amp;mdash; 你能想到的&lt;strong&gt;这段时间&lt;/strong&gt;越长，那就越是该做&lt;/li&gt;
&lt;li&gt;在掌握60%信息时做决策 &amp;mdash;&amp;mdash; 少了决策会错，多了太耗时且产生摇摆&lt;/li&gt;
&lt;li&gt;规划/计划 &amp;mdash;&amp;mdash; 谋定而后动，事情开始可能看不到全景(例如60%信息原则)，但不要因此而盲目开始，尽最大能力制定计划而后再逐步修正&lt;/li&gt;
&lt;li&gt;聚焦 &amp;mdash;&amp;mdash; 帕累托法则(二八原则)：在许多现象中，约80%的结果来自于20%的原因；少数人掌握着多数的资源；少量的因素决定着事情的成败；所以先找到那些少量的决定性因素，然后聚焦； &lt;strong&gt;&amp;ldquo;找到&amp;rdquo;&lt;/strong&gt; 是一个能力， &lt;strong&gt;&amp;ldquo;聚焦&amp;rdquo;&lt;/strong&gt; 是另一个能力&lt;/li&gt;
&lt;li&gt;越艰难的选择，距离正确越近 &amp;mdash;&amp;mdash; 这句话最早接触是某某公司喊口号“做难而正确的事”，听到以后觉得说的真有道理，太多时候我们不是不知道哪条路是对的，而是抱侥幸心理期望走捷径却能够到达终点&lt;/li&gt;
&lt;li&gt;事前兜底&amp;gt;亡羊补牢 &amp;mdash;&amp;mdash; 如果能在事前保留&amp;gt;1个兜底选择可能性，那么心理负担也会小一些，上限可能更高，失败后的风险也更低&lt;/li&gt;
&lt;li&gt;别拖延别拖延别拖延(拖延症晚期患者时刻敲响警钟) &amp;mdash;&amp;mdash; 尽快开始，很多事情只要开始了，即使不投入或者少投入，他也会自然发展&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;与人&#34;&gt;与人&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;真诚坦荡 &amp;mdash;&amp;mdash; 真诚是必杀技，真诚!=单纯；对人真诚，也别轻视别人的真诚&lt;/li&gt;
&lt;li&gt;话到嘴边留三分 &amp;mdash;&amp;mdash; 描述事实不夸大；评论事实别说死；预期管理要做好&lt;/li&gt;
&lt;li&gt;己所不欲，勿施于人 &amp;mdash;&amp;mdash; 换位思考&lt;/li&gt;
&lt;li&gt;让花成花，让树成树，授人以鱼不如授人以渔 &amp;mdash;&amp;mdash; 不要过多干涉别人的选择，每个人有每个人的南墙&lt;/li&gt;
&lt;li&gt;帮助是情分，不帮是本分 &amp;mdash;&amp;mdash; 对外界的初始预期应该是得不到援助&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <title>MCMF from scratch</title>
      <link>https://duck-dd.github.io/posts/mcmf/</link>
      <pubDate>Tue, 24 Jun 2025 00:00:00 +0000</pubDate>
      <guid>https://duck-dd.github.io/posts/mcmf/</guid>
      <description>&lt;p&gt;需要深度用到MCMF了，但是摸了摸自己的脑门，脑子里没有公式和演算，只剩几个概念了。
记录一下我从使用的角度理解MCMF问题(东拼西凑)的过程；某些定理的推导，或者复杂度的计算原理，不会深扒；顺便说个感悟，在feed如此丰富的今天，我们还是应该时刻锻炼传统手艺，保留信息检索、过滤、沉淀的能力，否则可能会越走越远(挺简单个问题一开始看偏了太难理解了)。&lt;/p&gt;
&lt;h1 id=&#34;mcmf概念&#34;&gt;MCMF概念&lt;/h1&gt;
&lt;p&gt;Minimum Cost Maximum Flow(最小费用最大流)，满足流量约束前提下，找到源点到汇点的最大流，并使总运输费用最小，数学模型如下：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;有向图 G=(V,E)，每条边 e=(u,v) 包含容量 c(e) 和单位流量费用 w(e)；&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;求源点 s 到汇点 t 的最大流，且总费用 ∑w(e)⋅f(e) 最小，其中 f(e) 为边 e 上的流量&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在解析MCMF之前，我们先一起了解一下他的前身，最大流问题和最小费用流问题。&lt;/p&gt;
&lt;h1 id=&#34;最大流问题&#34;&gt;最大流问题&lt;/h1&gt;
&lt;p&gt;最大流问题是：在一个有向网络中，找到从源点（流量的起点）到汇点（流量的终点）的最大可行流量，同时满足每条边的容量限制；该问题是上世纪五十年代提出的，提出后Lester Ford和Delbert Fulkerson很快给出了解法，也是最大流后续一切发展的理论基础：&lt;code&gt;Ford-Fulkerson&lt;/code&gt;算法。&lt;/p&gt;
&lt;h2 id=&#34;第一印象&#34;&gt;第一印象&lt;/h2&gt;
&lt;p&gt;简单描述，有向有权图，起点&lt;code&gt;s&lt;/code&gt;，终点&lt;code&gt;t&lt;/code&gt;，我们要寻找&lt;code&gt;s-&amp;gt;t&lt;/code&gt;的最大的流量。
那么朴素的第一印象来看，暴力呗，BFS把所有&lt;code&gt;s-&amp;gt;t&lt;/code&gt;路径集合&lt;code&gt;P&lt;/code&gt;全部记录下来，然后逐条路径遍历&lt;code&gt;P&lt;/code&gt;，每一条路径都跑满(路径上最小容量边)，同时更新涉及的边的容量值(这里可能还需要维护一个&lt;code&gt;边-&amp;gt;剩余容量&lt;/code&gt;)，结束后得到一个总的流量值。
提出这个方案后，我们第一时间就会有做简单优化的想法，最朴素的想法就是，对于&lt;code&gt;s&lt;/code&gt;的所有出边都满，或者&lt;code&gt;t&lt;/code&gt;的所有入边都满的情况下，是可以快速退出的；有了快速退出这个想法后，继续思考，&lt;code&gt;P&lt;/code&gt;的遍历顺序是对退出速度有影响的，初始状态下所有边没有消耗，&lt;code&gt;P&lt;/code&gt;中的所有路径按大小排序，从大到小的顺序排序，大点干早点散(每次选择一条路径并记录开销后，也可以对&lt;code&gt;P&lt;/code&gt;剩余的路径重排序，只不过开销比较大)，这样感觉上可以更快结束。
好了，聪明的你，在10s以内经历了上述的思考过程，但你眉头一皱，发现问题并不如此简单，简单的想法并不能确保能找到最大流，例如如下的情况：&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;图1 blocking-flow(黑色数字=容量,红色数字=流量)&#34; loading=&#34;lazy&#34; src=&#34;https://duck-dd.github.io/images/mcmf/mcmf-1.png&#34;&gt;&lt;/p&gt;
&lt;center&gt;图1 blocking-flow(黑色数字=容量,红色数字=流量)&lt;/center&gt;
&lt;p&gt;如图1左(黑色数字=容量,红色数字=流量)，流量=4后，无法再找到路径可通过流量了，但是如图1右，最大流其实是5；这里引入一个概念，&lt;code&gt;阻塞流&lt;/code&gt;，即将所有的路径都阻塞了，无法再新增流量；显而易见，最大流是阻塞流，但阻塞流未必是最大流。
结合这个具体的例子，我们反过来思考为什么我们上面一起想出来的朴素的方法无法确保能够找到最大流呢？我们就结合这一个具体的简单的例子来分析，把整个图1左的中间部分完全忽略，我们只关注起点&lt;code&gt;s&lt;/code&gt;以及他的出边，终点&lt;code&gt;t&lt;/code&gt;以及他的入边，我们碰到了这样一个情况，我们选定了&lt;code&gt;s&lt;/code&gt;的左出边以及&lt;code&gt;t&lt;/code&gt;的右入边并且把它们两个给跑满了，而&lt;code&gt;s&lt;/code&gt;的右出边和&lt;code&gt;t&lt;/code&gt;的左入边他们两个虽然还有容量但是却无法互连(即我们忽略的图的中间的部分没办法把它们连接起来)，而图1右中，&lt;code&gt;t&lt;/code&gt;的右入边跑满的流量不仅仅来自于&lt;code&gt;s&lt;/code&gt;的左出边，还有&lt;code&gt;s&lt;/code&gt;的右出边；ok, you got it! 简单总结，我们的朴素的暴力解法存在的问题是，会存在不合理的路径规划，他会把若干个瓶颈边放到一条路径里，导致多个瓶颈被同时耗尽。当然了，这是我们最通俗的理解，未必描述的是准确的。&lt;/p&gt;
&lt;p&gt;那么如何修正能够确保准确的找到最大流呢？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;再继续暴力的把&lt;code&gt;P&lt;/code&gt;的所有排序都跑一遍，复杂度不太现实(感兴趣可以算算复杂度)&lt;/li&gt;
&lt;li&gt;前面提到问题在于某一些路径的选取不合理，它可能同时触发了多个瓶颈(它本可以少触发一些瓶颈)
&lt;ul&gt;
&lt;li&gt;我们避免使用到不合理的路径？那对路径打分？结合实时的 &lt;code&gt;residual graph(残量图，余量图，残量网络 等)&lt;/code&gt;，对剩余的路径打分，路径消耗掉的边(消耗掉边就是指一条边跑满)越少分越高？也不合理，每一条边价值并不是相等的，例如跨海大桥，这一条边甚至就是整个图的瓶颈；那我们从点入手？每个点都有流入边和流出边，流入和流出在每个点是相等的(&lt;code&gt;s&lt;/code&gt; &lt;code&gt;t&lt;/code&gt;除外)，我们尽量让每个点的流入流出比接近于他的容量的入出比，并对路径的所有点做加权后作为评分？说实话我不知道这个想法合理不合理，但是只要是想要依赖&lt;code&gt;residual graph&lt;/code&gt;来建立评分机制，那么随着迭代次数提升，每次都要更新评分，复杂度应该都是不可接受的&lt;/li&gt;
&lt;li&gt;那么换个思路，我们不在避免使用到不合理路径上下功夫，我们能不能做到随时撤销之前的不合理路径？这样我们就可以大胆的随便搞，一边搞一边修正直至结束；恭喜你，你跟Lester Ford和Delbert Fulkerson可能想到一块去了&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ford-fulkerson&#34;&gt;Ford-Fulkerson&lt;/h2&gt;
&lt;p&gt;一句话描述&lt;code&gt;Ford-Fulkerson&lt;/code&gt;算法，就是在建立&lt;code&gt;residual graph&lt;/code&gt;时，除了更新每条边的残余容量，还会对已经产生的流量建立反向边，下一轮迭代时，反向边也可以使用。
从物理意义上，反向边一开始是没有的，对正向边开销后才会有反向边(容量等于正向边的开销值)，这没有问题；反向边产生开销时，实际效果类似于水流对冲，本来正向走3个水流，反向再走一个水流，其实最终的效果就等于这条水管(边)正向走了2个水流，解释的通，看来可以理解。
但是回到上面我们自己的思考，我们(或者可能只是我)愚蠢的脑袋里想的是要对之前的路径做撤销，当我们在某一轮迭代中使用到了一条反向边时，我们相当于对曾经使用到这条边的某一条路径撤销了一个流量，是这样吗？(如果是这样那就不应该仅是这一条反向边要做开销了，而是应该找到一条路径)
不是的，还是用图1左举例，他的&lt;code&gt;residual graph&lt;/code&gt;如下：&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;图2 图1左的residual graph&#34; loading=&#34;lazy&#34; src=&#34;https://duck-dd.github.io/images/mcmf/mcmf-2.png&#34;&gt;&lt;/p&gt;
&lt;center&gt;图2 图1左部的residual-graph&lt;/center&gt;
&lt;p&gt;图2中，我们可以继续找到这样一条路径&lt;code&gt;s-&amp;gt;v2-&amp;gt;v4-&amp;gt;v1-&amp;gt;v3-&amp;gt;t 流量=1&lt;/code&gt;，其中&lt;code&gt;v4-&amp;gt;v1 流量=1&lt;/code&gt;这一段是我们选中的反向边(我们只对这一条边做了&amp;quot;撤销&amp;quot;)，可以看到，经过这一次修正后，我们实际的路径选择就跟图1右的最大流一致了，眼前的事实证明&lt;code&gt;Ford-Fulkerson&lt;/code&gt;算法是正确的。
那我们尝试解答一下我们刚才产生的那个疑惑，当我们使用了一条反向边的时候，我们究竟在做什么?我是这样理解这个问题的，在&lt;code&gt;residual graph&lt;/code&gt;中，如果我们在一条路径中使用到了一条反向边，那么说明一个问题，在最初的原图中，分别存在&lt;code&gt;s&lt;/code&gt;&amp;mdash;&amp;gt;&lt;code&gt;t&lt;/code&gt;的这样两条路径，分别包含了这条边的两个端点，我们可以把这个图抽象成一个&lt;code&gt;H&lt;/code&gt;型，这条边就是中间的横杠，当我们开销这条边的反向边时，实际是在调整&lt;code&gt;H&lt;/code&gt;型的两条竖线之间的流量分配方式(即合理规划使用&lt;code&gt;H&lt;/code&gt;的左上 左下 右上 右下四部分)，以使得整个&lt;code&gt;H&lt;/code&gt;通过的流量最大。&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Shortest Path</title>
      <link>https://duck-dd.github.io/posts/shortest-path/</link>
      <pubDate>Mon, 23 Jun 2025 00:00:00 +0000</pubDate>
      <guid>https://duck-dd.github.io/posts/shortest-path/</guid>
      <description>&lt;h1 id=&#34;最短路径问题&#34;&gt;最短路径问题&lt;/h1&gt;
&lt;p&gt;寻找有向图中两个顶点之间的路径，使得 &lt;code&gt;路径最短&lt;/code&gt; 或 &lt;code&gt;路径上各边的权重之和最小&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;1-无权图最短路径&#34;&gt;1 无权图最短路径&lt;/h2&gt;
&lt;p&gt;所有边权重相同，最短路径退化为寻找两点间边数最少的路径，&lt;code&gt;BFS&lt;/code&gt;搞定。&lt;/p&gt;
&lt;h2 id=&#34;2-单源最短路径sssp-single-source-shortest-paths&#34;&gt;2 单源最短路径(SSSP, Single-Source Shortest Paths)&lt;/h2&gt;
&lt;h3 id=&#34;21-dijkstra堆优化&#34;&gt;2.1 Dijkstra(堆优化)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;限制：边权非负&lt;/li&gt;
&lt;li&gt;思路：基于已经确定的最短路径，逐步贪心获得源点到所有节点的最短路径&lt;/li&gt;
&lt;li&gt;步骤
&lt;ul&gt;
&lt;li&gt;初始化：
&lt;ul&gt;
&lt;li&gt;源点&lt;code&gt;s&lt;/code&gt;的距离为0，源点&lt;code&gt;s&lt;/code&gt;一步可达的节点距离记为单边的权重，其他节点距离为无穷大(∞)&lt;/li&gt;
&lt;li&gt;所有节点标记为未访问&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;循环处理：
&lt;ul&gt;
&lt;li&gt;从未访问节点中选择距离最小的节点&lt;code&gt;u&lt;/code&gt;，标记为已访问&lt;/li&gt;
&lt;li&gt;对&lt;code&gt;u&lt;/code&gt;的每个邻接节点&lt;code&gt;v&lt;/code&gt;，进行 &lt;strong&gt;松弛操作&lt;/strong&gt;:
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;if distance[v] &amp;gt; distance[u] + weight(u, v):
    distance[v] = distance[u] + weight(u, v)
    predecessor[v] = u  # 记录路径
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;终止条件：所有节点均被访问，或未访问节点的最小距离为 ∞（表示源点无法到达剩余节点）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;优化：使用优先队列(最小堆)维护未访问节点，每次提取最小距离节点的时间为&lt;code&gt;O(logV)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;记录路径：通过记录&lt;code&gt;前驱节点&lt;/code&gt;可以完整还原最短路径，若存在多条最短路径(距离相同但路径不同)，会记录其中一条(具体取决于节点的访问顺序，例如堆优化中相同距离节点的出堆顺序)&lt;/li&gt;
&lt;li&gt;算法正确性理解：未访问节点中排序最靠前的(距离最小的)节点，是基于所有已访问节点推算出来的最近的点，如果再绕行其他节点，那么一定比当前距离更远；相反，如果不是未访问节点里距离最小的点，可能通过其他未访问节点绕行更优，所以每次迭代可以标记这一个点&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;22-bellman-ford&#34;&gt;2.2 Bellman-Ford&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;限制：边权可以为负，但不能有从源点可达的负权环(否则最短路径无意义，长度可无限小)&lt;/li&gt;
&lt;li&gt;思路：通过 &lt;strong&gt;松弛操作&lt;/strong&gt; 逐步逼近从源点到所有其他顶点的最短路径；松弛操作指的是：对于每条边&lt;code&gt;(u, v)&lt;/code&gt;，若从源点到&lt;code&gt;u&lt;/code&gt;的距离 &lt;code&gt;dist[u]&lt;/code&gt;加上边权&lt;code&gt;w(u, v)&lt;/code&gt;小于当前到&lt;code&gt;v&lt;/code&gt;的距离&lt;code&gt;dist[v]&lt;/code&gt;，则更新&lt;code&gt;dist[v]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;步骤
&lt;ul&gt;
&lt;li&gt;初始化：源点距离&lt;code&gt;dist[source] = 0&lt;/code&gt;，其他顶点距离&lt;code&gt;dist[v] = ∞&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;弛操作：对图中所有边进行&lt;code&gt;n-1&lt;/code&gt;轮松弛（&lt;code&gt;n&lt;/code&gt;为顶点数）；因为最短路径最多包含&lt;code&gt;n-1&lt;/code&gt;条边(否则存在环，若为正权环可忽略，负权环则无法求解)&lt;/li&gt;
&lt;li&gt;检测负权环：第&lt;code&gt;n&lt;/code&gt;次松弛时，若仍能更新距离，则说明存在从源点可达的负权环&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;优化：下面的SPFA&lt;/li&gt;
&lt;li&gt;算法正确性理解：&lt;code&gt;n&lt;/code&gt;个节点，那么起点到终点路径最长就是 &lt;code&gt;1-&amp;gt;2-&amp;gt;3-&amp;gt;...-&amp;gt;n&lt;/code&gt; 最多有&lt;code&gt;n-1&lt;/code&gt;跳(边)，否则的话就是有环了(如果是正环，绕行是更差的解，如果是负环，最短路径无解)，算法迭代&lt;code&gt;x&lt;/code&gt;轮，那么&lt;code&gt;x&lt;/code&gt;跳能到达的节点的最短路径都会被优化完成，所以经过&lt;code&gt;n-1&lt;/code&gt;轮迭代，最长的路径也能被优化完成了；如何理解这句话呢，假设一个点距离起点有1条边和3条边两条路径，那么经过三轮迭代，这两条路径之间一定会做PK，择优就会完成&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;23-spfa-shortest-path-faster-algorithm&#34;&gt;2.3 SPFA, Shortest Path Faster Algorithm&lt;/h3&gt;
&lt;p&gt;SPFA其实只是Bellman-Ford的筛选优化，本质相同&lt;/p&gt;</description>
    </item>
    <item>
      <title>Golang Tips</title>
      <link>https://duck-dd.github.io/posts/go-tips/</link>
      <pubDate>Sun, 22 Jun 2025 00:00:00 +0000</pubDate>
      <guid>https://duck-dd.github.io/posts/go-tips/</guid>
      <description>&lt;p&gt;说明：&lt;/p&gt;
&lt;p&gt;持续更新(标题含TODO关键字的小节，都会以topic开始，后续会持续完善topic)。记录内容是一些对我而言：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;小的骚操作(可能有些tricky)&lt;/li&gt;
&lt;li&gt;容易理解偏差的点&lt;/li&gt;
&lt;li&gt;冷门的点(没啥用的点)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;golang代码执行顺序&#34;&gt;Golang代码执行顺序&lt;/h2&gt;
&lt;p&gt;没有并发，一个顺序逻辑，CPU真正执行指令不一定与编码顺序完全一致，Go的编译器会做优化，前提是会解决依赖逻辑，看起来是“顺序执行”这一假设。&lt;/p&gt;
&lt;p&gt;了解更多可查看Golang内存模型规范。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;internal包&#34;&gt;internal包&lt;/h2&gt;
&lt;p&gt;internal包，只能被和internal目录有同一个父目录的包所导入。
例如，net/http/internal/chunked内部包只能被net/http/httputil或net/http包导入，但是不能被net/url包导入。不过net/url包却可以导入net/http/httputil包。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;变量交换&#34;&gt;变量交换&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;i, j = j, i // 交换 i 和 j 的值
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h2 id=&#34;for循环有其他识别break的关键字&#34;&gt;for循环有其他识别break的关键字&lt;/h2&gt;
&lt;p&gt;for循环内有其他识别break的关键字时，其他关键字内的break会被其识别而不会跳出for，以下用select举例，switch同理。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;for {
		select {
		case &amp;lt;-sigChan:
			// exit for  
			break
		default:
		  // do something
		}
	}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;以上break并不能退出for循环，可以使用标签或goto解决：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// 1 标签
FOR:
	for {
		select {
		case &amp;lt;-sigChan:
			// exit for  
			break FOR
		default:
		  // do something
		}
	}

----------------------------
// 2 goto
	for {
		select {
		case &amp;lt;-sigChan:
			// exit for  
			goto ENDFOR
		default:
		  // do something
		}
	}
ENDFOR:
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h2 id=&#34;读取stdin刷题别再因为stdin踩坑了喂&#34;&gt;读取stdin(刷题别再因为stdin踩坑了喂)&lt;/h2&gt;
&lt;p&gt;fmt包内 Scan系列 SScan系列 Fscan系列如下：&lt;/p&gt;</description>
    </item>
    <item>
      <title>About space</title>
      <link>https://duck-dd.github.io/about_space/</link>
      <pubDate>Sat, 21 Jun 2025 00:00:00 +0000</pubDate>
      <guid>https://duck-dd.github.io/about_space/</guid>
      <description>&lt;hr&gt;
&lt;p&gt;本空间内容按 目录=&amp;gt;标签 层级分类&lt;/p&gt;
&lt;h2 id=&#34;目录&#34;&gt;目录&lt;/h2&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;&lt;strong&gt;Category&lt;/strong&gt;&lt;/th&gt;
          &lt;th&gt;&lt;strong&gt;内容&lt;/strong&gt;&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;About&lt;/td&gt;
          &lt;td&gt;简介&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;CS&lt;/td&gt;
          &lt;td&gt;计算机方向内容&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Read&lt;/td&gt;
          &lt;td&gt;读 书/博客/论文/文章 等的笔记&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Life-Note&lt;/td&gt;
          &lt;td&gt;生活相关的记录思考&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Economics&lt;/td&gt;
          &lt;td&gt;经济/金融/理财/投资&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Anything&lt;/td&gt;
          &lt;td&gt;杂七杂八的内容&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;标签&#34;&gt;标签&lt;/h2&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;&lt;strong&gt;Tag&lt;/strong&gt;&lt;/th&gt;
          &lt;th&gt;&lt;strong&gt;Category&lt;/strong&gt;&lt;/th&gt;
          &lt;th&gt;&lt;strong&gt;内容&lt;/strong&gt;&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;About&lt;/td&gt;
          &lt;td&gt;About&lt;/td&gt;
          &lt;td&gt;简介&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;&lt;strong&gt;Tag&lt;/strong&gt;&lt;/th&gt;
          &lt;th&gt;&lt;strong&gt;Category&lt;/strong&gt;&lt;/th&gt;
          &lt;th&gt;&lt;strong&gt;内容&lt;/strong&gt;&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;Golang&lt;/td&gt;
          &lt;td&gt;CS&lt;/td&gt;
          &lt;td&gt;go语言专栏&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Rust&lt;/td&gt;
          &lt;td&gt;CS&lt;/td&gt;
          &lt;td&gt;rust语言专栏&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Python&lt;/td&gt;
          &lt;td&gt;CS&lt;/td&gt;
          &lt;td&gt;python语言专栏&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Leetcode&lt;/td&gt;
          &lt;td&gt;CS&lt;/td&gt;
          &lt;td&gt;leetcode刷题记录&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Algorithm&lt;/td&gt;
          &lt;td&gt;CS&lt;/td&gt;
          &lt;td&gt;算法&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Net&lt;/td&gt;
          &lt;td&gt;CS&lt;/td&gt;
          &lt;td&gt;网络&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;CS-Other&lt;/td&gt;
          &lt;td&gt;CS&lt;/td&gt;
          &lt;td&gt;其他&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;&lt;strong&gt;Tag&lt;/strong&gt;&lt;/th&gt;
          &lt;th&gt;&lt;strong&gt;Category&lt;/strong&gt;&lt;/th&gt;
          &lt;th&gt;&lt;strong&gt;内容&lt;/strong&gt;&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;Read-note&lt;/td&gt;
          &lt;td&gt;Read&lt;/td&gt;
          &lt;td&gt;读书笔记, 一般是短篇内容的精细记录&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Read-summary&lt;/td&gt;
          &lt;td&gt;Read&lt;/td&gt;
          &lt;td&gt;读书思考, 一般是长篇内容的概括总结&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;&lt;strong&gt;Tag&lt;/strong&gt;&lt;/th&gt;
          &lt;th&gt;&lt;strong&gt;Category&lt;/strong&gt;&lt;/th&gt;
          &lt;th&gt;&lt;strong&gt;内容&lt;/strong&gt;&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;Family&lt;/td&gt;
          &lt;td&gt;Life-Note&lt;/td&gt;
          &lt;td&gt;关于家庭&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Car&lt;/td&gt;
          &lt;td&gt;Life-Note&lt;/td&gt;
          &lt;td&gt;关于车&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;House&lt;/td&gt;
          &lt;td&gt;Life-Note&lt;/td&gt;
          &lt;td&gt;关于房&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;&lt;strong&gt;Tag&lt;/strong&gt;&lt;/th&gt;
          &lt;th&gt;&lt;strong&gt;Category&lt;/strong&gt;&lt;/th&gt;
          &lt;th&gt;&lt;strong&gt;内容&lt;/strong&gt;&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;Economics-Note&lt;/td&gt;
          &lt;td&gt;Economics&lt;/td&gt;
          &lt;td&gt;经济/金融 杂记&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Investment&lt;/td&gt;
          &lt;td&gt;Economics&lt;/td&gt;
          &lt;td&gt;关于投资&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;&lt;strong&gt;Tag&lt;/strong&gt;&lt;/th&gt;
          &lt;th&gt;&lt;strong&gt;Category&lt;/strong&gt;&lt;/th&gt;
          &lt;th&gt;&lt;strong&gt;内容&lt;/strong&gt;&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;Anything&lt;/td&gt;
          &lt;td&gt;Anything&lt;/td&gt;
          &lt;td&gt;-&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;</description>
    </item>
    <item>
      <title>装修那些事儿</title>
      <link>https://duck-dd.github.io/posts/decoration/</link>
      <pubDate>Sat, 24 Jun 2023 00:00:00 +0000</pubDate>
      <guid>https://duck-dd.github.io/posts/decoration/</guid>
      <description>&lt;p&gt;这个行业，是一个没有监管，没有行业标准(有的大部分也是扯淡)，群魔乱舞的行业，这行业人的话，不要相信，不要相信，不要相信&lt;/p&gt;
&lt;p&gt;从我自身经历来说，这件事真的不复杂，完全不值他现在的价钱；一开始这件事很神秘，你觉得付多少钱都是合理的，但真不是这样，到处都是骗钱的；所以装修开始前真正的第一件事，就是你要了解一下背景评估一下工作量，放心大胆的去砍价吧&lt;/p&gt;
&lt;p&gt;本文从自己的亲身经历出发来分析一下装修这件令人头疼的事情，没有展开太多的细节，只以各个阶段的典型选择题为切入点，欢迎指正和交流，预祝你获得你的梦中情屋～&lt;/p&gt;
&lt;h1 id=&#34;全包-or-半包&#34;&gt;全包 or 半包&lt;/h1&gt;
&lt;p&gt;如果你刚开始考虑装修，那你一定是特别开心和兴奋的。你面临的第一个问题大概就是，&amp;ldquo;半包&amp;rdquo; or &amp;ldquo;全包&amp;rdquo;（自己找工人的方式，不太了解就不谈了）；很多声音会告诉你说，全包这种完全黑盒的行为会有太多坑了，给你用的东西都是差的balabala 但是，如果你想省心，或者在装修的这几个月里你没有太多的时间精力能够投入进这件事，那么还是建议你咬咬牙忽略这些有一丢丢危言耸听的说法，果断的选择全包；如果你选择了全包，那么我们对最终效果的确认无非靠两个关键指标&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 是不是我想要的样子&lt;/li&gt;
&lt;li&gt;2 是不是环保&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为了第一点，你需要查看素材库确认好自己喜欢的样子，跟设计师做充分的沟通，并在施工过程的关键节点约设计师一起去现场做阶段性的沟通和double check，因为省心，所以你做的功课可能不多，其实这比较依赖设计师的专业性
为了第二点，你需要做的功课是，查一查装修过程中哪些使用到的材料可能会不环保，然后直接在合同里声明好这些材料具体使用哪些品牌的哪些型号，并在这些材料入场时做好检查(其实可以找类似&amp;quot;监工&amp;quot;的角色来帮助你执行，应该总比你完全不去现场要好)&lt;/p&gt;
&lt;p&gt;朋友，如果你选择了半包，那你是真的勇士，对你表示敬佩，以下的讨论咱们就默认你已经做了大量的背景&amp;amp;功课的学习。&lt;/p&gt;
&lt;h1 id=&#34;入户门&#34;&gt;入户门&lt;/h1&gt;
&lt;p&gt;换！你99%不喜欢开发商的这个，相比换锁，就干脆直接换门吧&lt;/p&gt;
&lt;h1 id=&#34;窗户&#34;&gt;窗户&lt;/h1&gt;
&lt;p&gt;如果允许，换！拉满配(可能很多地方政策不允许动外立面，那就没办法了)&lt;/p&gt;
&lt;h1 id=&#34;隔音&#34;&gt;隔音&lt;/h1&gt;
&lt;p&gt;如果你对声音要求很高，考虑做全屋音响，那是肯定得做了
如果你没有考虑做全屋音响，那么我还是强！烈！建！议！做隔音！&lt;/p&gt;
&lt;h1 id=&#34;全屋定制-or-成品家具&#34;&gt;全屋定制 or 成品家具&lt;/h1&gt;
&lt;p&gt;个人观点，全屋定制真的不咋地，建议祛魅，认真的去逛一逛成品家具市场；
还往下看，你果然还是跟我一样，头铁的选择了全屋定制，那这个子方向发个千八百个论文感觉都泛不起一点水花；
商家贩卖的焦虑点：甲醛，苯系化合物；你要想死磕，得先学化学；
标准：国外国内太多标准，但有一点个人觉得有参考意义，就是 &lt;code&gt;抽检&lt;/code&gt; &amp;amp; &lt;code&gt;送检&lt;/code&gt; ；
品牌选择：大商场大品牌的品牌溢价确实太高了，而且也确实代加工，所以有判断能力那就果断直接找工厂吧；
细节不展开讲了，说一点注意点，跟电位/管道做配合要提前做规划，这也是为什么把这个问题放得这么靠前&lt;/p&gt;
&lt;h1 id=&#34;布局&#34;&gt;布局&lt;/h1&gt;
&lt;p&gt;该砸就砸别犹豫(非承重) 新砌墙时考虑好用途，如果有承重需求(例如挂电视 挂柜子等)，考虑好墙体的材料
砌墙后多晾一晾 否则后期墙上面搞得任何东西都容易剥离
墙的&lt;em&gt;&lt;strong&gt;平&lt;/strong&gt;&lt;/em&gt;的问题，从小白视角来看，就是表面是平面，并且这个平面跟其他平面的角度(一般90度)是正常的，这点不管施工方是冲筋 垂平还是啥方法，总之先讲清楚要求并让他们严格执行
坐便or蹲便？多个卫生间可以考虑留一个蹲便，不仅健康，而且后期小孩使用也方便，或者上面再放小马桶也好扩展（这个问题需要提前考虑因为可能影响卫生间地面高度布局）&lt;/p&gt;
&lt;h1 id=&#34;水电&#34;&gt;水电&lt;/h1&gt;
&lt;p&gt;水管线管一定选择最好的品牌的好的型号，避免后期出问题太麻烦
至于是按使用长度算，还是一口价模式，自己来衡量对比，是否点对点走线？可以看网上大量的分析
电箱位置挪不挪？如果风水问题(那么你一定是相信这个的)，挪；如果只是为了好看，那后期挺多方法弄好看，可以看看效果自己能不能接受
前置过滤器：空间允许，就安；拉满配，本身没多贵，影响水压就不好了
全屋软水：没考虑清楚，就做
下水：有顾虑该做的位置就做，用不用得上再说
电位：有顾虑就做，总比后期拉插线板强(70个/100平 ？)
开关：一开多控别顾虑，想做就做，方便生活
全屋智能：已经在考虑这个问题了？那就做。。。有点贵，考虑好性价比吧，应了那句话，贵的东西，除了贵，没有其他的毛病；这里不展开讲了，太复杂了，完全可以单开一页的东西；PS:从初中物理来分析全屋智能，既然有智能控制开关，而这个开关本身也是需要供电的，那么如果把开关串联到电路里，他就不是yes or no的开关，关闭状态本身是一个大电阻，也就是还是有微弱的电流通过电路，这一定是不好的，所以还是预留好控制路的零线吧&lt;/p&gt;
&lt;p&gt;有两个容易忽略的点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 墙面不能开长的横槽(脑补一下这确实会影响墙的稳定性)&lt;/li&gt;
&lt;li&gt;2 强弱电磁场干扰问题，物理已经还给老师了，但是避免干扰这个要保持距离还是符合常识的&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;接下来让我们一起进入&lt;strong&gt;木瓦油&lt;/strong&gt;环节&lt;/p&gt;
&lt;h1 id=&#34;全屋吊顶-or-部分吊顶&#34;&gt;全屋吊顶 or 部分吊顶&lt;/h1&gt;
&lt;p&gt;如果考虑做无主灯，那么肯定全屋吊顶
如果对层高有要求，那么就别吊顶
如果犹豫，那么就别做(我认为全部吊顶的目的就是做光线的规划，犹豫的话说明没有要求或规划，那就别做算了)&lt;/p&gt;</description>
    </item>
    <item>
      <title>软件架构设计原则</title>
      <link>https://duck-dd.github.io/posts/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/</link>
      <pubDate>Sun, 16 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://duck-dd.github.io/posts/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/</guid>
      <description>&lt;p&gt;每次接手一些老旧系统，总是很头疼，最近想，会不会别人接手了我的系统以后也是一样的感受，想到可能有人每天都在吐槽(骂)我头皮发麻啊&amp;hellip;&lt;/p&gt;
&lt;p&gt;知易行难，其实怎么做好一个后端服务大家都是门清的，只是受限于 &lt;code&gt;排期&lt;/code&gt; &lt;code&gt;业务价值&lt;/code&gt; &lt;code&gt;协作&lt;/code&gt; 等太多因素，往往事与愿违。只能说但行好事莫问前程吧，下面再把这些原则列一下，时刻提醒自己吧；以下原则从个人角度分先后，不是说有重要性区别，而是有些原则很高频，或者很容易被忽略，需要时刻牢记。&lt;/p&gt;
&lt;h1 id=&#34;一-职责逻辑-清晰&#34;&gt;一 职责/逻辑 清晰&lt;/h1&gt;
&lt;h2 id=&#34;单一职责原则single-responsibility-principle-srp&#34;&gt;单一职责原则（Single Responsibility Principle, SRP）&lt;/h2&gt;
&lt;p&gt;每个&lt;code&gt;单元&lt;/code&gt;只负责&lt;em&gt;一件事&lt;/em&gt;。
从总体架构上讲，这个单元是一个子系统，例如订单系统，日志系统；从系统架构上讲，这个单元是一个模块，例如文章管理模块，评论管理模块等；从代码模块内部讲，这个单元是一个组件，一个类，一个struct等。再往下看，一个类还有N多个方法&amp;hellip;
就像分子，原子，质子/电子，夸克&amp;hellip;从宏观到微观的过程，就是我们把一套复杂的系统一点一点拆解开的过程，而每次向下拆解一层的时候，这一层的个体，尽量做到每个都负责一件事&lt;/p&gt;
&lt;h2 id=&#34;迪米特法则law-of-demeter-lod&#34;&gt;迪米特法则（Law of Demeter, LoD）&lt;/h2&gt;
&lt;p&gt;一个模块应尽可能少地了解其他模块的内部细节。
反过来看，一个模块向外不暴露细节，别人就没法了解细节了；所以还是在讲控制耦合。&lt;/p&gt;
&lt;h2 id=&#34;高内聚低耦合high-cohesion-low-coupling&#34;&gt;高内聚，低耦合（High Cohesion, Low Coupling）&lt;/h2&gt;
&lt;p&gt;模块内部的功能紧密相关(高内聚)，模块间通过明确接口交互，依赖关系简单(低耦合)。
明牌了，直接再提醒你一下，控制耦合控制耦合控制耦合&amp;hellip;&lt;/p&gt;
&lt;h2 id=&#34;接口隔离原则interface-segregation-principle-isp&#34;&gt;接口隔离原则（Interface Segregation Principle, ISP）&lt;/h2&gt;
&lt;p&gt;客户端不应被迫依赖它不需要的接口，应将大接口拆分为多个专用小接口。
这里不是对使用者的要求，而是对接口提供(设计)者提出要求，在设计对外暴露接口时，要尽可能小，单一，独立，这样使用起来更灵活。
对外是这样的，但是内部接口，说实话我做不到尽可能小。&lt;/p&gt;
&lt;h1 id=&#34;二-破坏性侵入性控制&#34;&gt;二 破坏性(侵入性)控制&lt;/h1&gt;
&lt;h2 id=&#34;开闭原则open-closed-principle-ocp&#34;&gt;开闭原则（Open-Closed Principle, OCP）&lt;/h2&gt;
&lt;p&gt;对扩展开放，对修改关闭。
从我的理解，这条原则更多还是在指导代码层面的设计；世界是动态发展的，没有一成不变的东西，那么对于代码，可扩展是必然的需求，那为什么对修改关闭呢？可能更多还是对原系统的侵入吧，你不知道你的使用方对你做出了怎么样的假设，总之目前为止世界和平，但当你修改了你的行为，假设被打破，世界就崩塌了&lt;/p&gt;
&lt;h2 id=&#34;里氏替换原则liskov-substitution-principle-lsp&#34;&gt;里氏替换原则（Liskov Substitution Principle, LSP）&lt;/h2&gt;
&lt;p&gt;子类必须能无缝替换父类，且不破坏原有系统的正确性。即父类出现的地方，子类可替代，且行为一致。&lt;/p&gt;
&lt;h1 id=&#34;三-依赖管理&#34;&gt;三 依赖管理&lt;/h1&gt;
&lt;h2 id=&#34;分层架构原则layered-architecture-principle&#34;&gt;分层架构原则（Layered Architecture Principle）&lt;/h2&gt;
&lt;p&gt;将系统按职责划分为清晰的层次，层间单向依赖，禁止跨层调用。&lt;/p&gt;
&lt;h2 id=&#34;依赖倒置原则dependency-inversion-principle-dip&#34;&gt;依赖倒置原则（Dependency Inversion Principle, DIP）&lt;/h2&gt;
&lt;p&gt;高层模块不应依赖低层模块，两者都应依赖抽象；抽象不应依赖细节，细节应依赖抽象。&lt;/p&gt;
&lt;h1 id=&#34;四-可扩展性&#34;&gt;四 可扩展性&lt;/h1&gt;
&lt;h2 id=&#34;演进式架构原则evolutionary-architecture&#34;&gt;演进式架构原则（Evolutionary Architecture）&lt;/h2&gt;
&lt;p&gt;架构设计应预留扩展空间，支持系统随业务需求逐步演进，而非追求 “一步到位” 的完美设计。&lt;/p&gt;
&lt;h1 id=&#34;五-安全代码安全服务安全业务安全等&#34;&gt;五 安全(代码安全，服务安全，业务安全等)&lt;/h1&gt;
&lt;h2 id=&#34;安全性原则security-by-design&#34;&gt;安全性原则（Security by Design）&lt;/h2&gt;
&lt;p&gt;将安全性嵌入架构设计的每个环节，而非事后补丁。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Golang schedule</title>
      <link>https://duck-dd.github.io/posts/go-schedule/</link>
      <pubDate>Sat, 21 Aug 2021 00:00:00 +0000</pubDate>
      <guid>https://duck-dd.github.io/posts/go-schedule/</guid>
      <description>&lt;h2 id=&#34;写在前面&#34;&gt;写在前面&lt;/h2&gt;
&lt;p&gt;runtime包实现了所有&lt;code&gt;goroutine scheduler&lt;/code&gt;、&lt;code&gt;memory allocator&lt;/code&gt;、&lt;code&gt;garbage collector&lt;/code&gt;细节，理论上可以从runtime包获取一切信息，没有直接怼源码，而是站在巨人的肩膀上（直接吃大佬们吃剩下的）。&lt;/p&gt;
&lt;p&gt;搜集到的材料，大家都是基于不同的go版本做的分析，而go版本迭代调度算法也在持续更新，所以整理的可能有些乱。但是可以保证的是，所有材料都是GM-&amp;gt;GMP演化后的材料。&lt;/p&gt;
&lt;h2 id=&#34;gm&#34;&gt;GM&lt;/h2&gt;
&lt;p&gt;go1.1版本以前，调度使用GM模型，如下图所示。简单的理解GM模型，就是有一个始终执行的调度函数schedule不停的执行调度计算，当某个M的G执行完成了，调度器就把这个M放回M队列，可绑定执行其他G（如果某个M+G发生了syscall，那么本来并发度是通过M数量控制的，此时并发度就降低了？）；如果G执行过程中创建新的G，会将新的G放入到G全局可执行队列中。G全局可执行队列的操作有一把全局锁，这导致了各个M对G全局队列的操作存在严重的竞争。&lt;/p&gt;
&lt;p&gt;下面这段完全是我的臆测，请别太相信：&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;简单概括呢，所以可以认为有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;G全局可执行队列(以下也可能简称G可执行队列)&lt;/li&gt;
&lt;li&gt;M可用队列&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;调度器要做的事就是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从G的可执行队列取G并从M的可用队列取M，将二者绑定开始执行G&lt;/li&gt;
&lt;li&gt;对于已经执行完的G，销毁G并立即将M释放回M可用队列供后续使用&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img alt=&#34;GM-model&#34; loading=&#34;lazy&#34; src=&#34;https://duck-dd.github.io/images/go-schedule/gm.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;那么GM模型有哪些问题呢？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(&lt;strong&gt;重点问题&lt;/strong&gt;)单一的全局mutex(sched.lock)和集中状态管理
&lt;ul&gt;
&lt;li&gt;mutex需要保护所有与全局goroutine队列相关操作(创建、完成、重排等等)，竞争严重&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;(&lt;strong&gt;重点问题&lt;/strong&gt;)per-M内存(M.mcache)问题
&lt;ul&gt;
&lt;li&gt;每个M都需要一个mcache，会导致资源消耗过大(每个mcache可以吸纳到2MB的内存缓存和其他缓存)
&lt;ul&gt;
&lt;li&gt;举个栗子，一个陷入syscall的M并不需要使用cache，但是在全部的M中，陷入系统调用的M与执行goroutine的M的比例可能是&lt;code&gt;N:1(N&amp;gt;&amp;gt;1)&lt;/code&gt;，这就导致了&lt;code&gt;N/(N+1)&lt;/code&gt;比例的mcache在闲置&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据局部性差&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;举个栗子，M1执行G1，此时创建了G2，G2通常是立刻进入了G全局可执行队列，而此时M1还在执行G1，所以G2通常被其他M执行，但是G1和G2通常强相关，所以G2最好也在M1上执行，因为G2对M1的缓存命中率更高&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;goroutine传递问题
&lt;ul&gt;
&lt;li&gt;goroutine(G)交接(G.nextg)，M之间会经常交接可运行的G&lt;/li&gt;
&lt;li&gt;再通俗点说，就是G空转，本来能够好好在一个M上执行完，但是由于全局队列的存在，G一旦回全局队列了，下次就不知道被哪个M取走了，所以叫“空转”；M加载G的上下文是有开销的，所以空转会导致性能下降&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;频繁的线程阻塞/解阻塞
&lt;ul&gt;
&lt;li&gt;syscalls情况下，线程经常被阻塞和解阻塞，增加了很多额外开销&lt;/li&gt;
&lt;li&gt;通俗点说，M+G syscall，M阻塞，syscall完成后，M解阻塞继续执行G（如果是通过M数量控制并发度，这是不是就导致了并发度降低？）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;gmp&#34;&gt;GMP&lt;/h2&gt;
&lt;p&gt;基于以上说的GM的问题，go1.1以后开始使用GMP调度模型。
G、M、P的定义如下(***/src/runtime/runtime2.go)。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;type g struct {
	// Stack parameters.
	// stack describes the actual stack memory: [stack.lo, stack.hi).
	// stackguard0 is the stack pointer compared in the Go stack growth prologue.
	// It is stack.lo+StackGuard normally, but can be StackPreempt to trigger a preemption.
	// stackguard1 is the stack pointer compared in the C stack growth prologue.
	// It is stack.lo+StackGuard on g0 and gsignal stacks.
	// It is ~0 on other goroutine stacks, to trigger a call to morestackc (and crash).
	stack       stack   // offset known to runtime/cgo
	stackguard0 uintptr // offset known to liblink
	stackguard1 uintptr // offset known to liblink

	_panic       *_panic // innermost panic - offset known to liblink
	_defer       *_defer // innermost defer
	m            *m      // current m; offset known to arm liblink
	sched        gobuf
	syscallsp    uintptr        // if status==Gsyscall, syscallsp = sched.sp to use during gc
	syscallpc    uintptr        // if status==Gsyscall, syscallpc = sched.pc to use during gc
	stktopsp     uintptr        // expected sp at top of stack, to check in traceback
	param        unsafe.Pointer // passed parameter on wakeup
	atomicstatus uint32
	stackLock    uint32 // sigprof/scang lock; TODO: fold in to atomicstatus
	goid         int64
	schedlink    guintptr
	waitsince    int64      // approx time when the g become blocked
	waitreason   waitReason // if status==Gwaiting

	preempt       bool // preemption signal, duplicates stackguard0 = stackpreempt
	preemptStop   bool // transition to _Gpreempted on preemption; otherwise, just deschedule
	preemptShrink bool // shrink stack at synchronous safe point

	// asyncSafePoint is set if g is stopped at an asynchronous
	// safe point. This means there are frames on the stack
	// without precise pointer information.
	asyncSafePoint bool

	paniconfault bool // panic (instead of crash) on unexpected fault address
	gcscandone   bool // g has scanned stack; protected by _Gscan bit in status
	throwsplit   bool // must not split stack
	// activeStackChans indicates that there are unlocked channels
	// pointing into this goroutine&amp;#39;s stack. If true, stack
	// copying needs to acquire channel locks to protect these
	// areas of the stack.
	activeStackChans bool
	// parkingOnChan indicates that the goroutine is about to
	// park on a chansend or chanrecv. Used to signal an unsafe point
	// for stack shrinking. It&amp;#39;s a boolean value, but is updated atomically.
	parkingOnChan uint8

	raceignore     int8     // ignore race detection events
	sysblocktraced bool     // StartTrace has emitted EvGoInSyscall about this goroutine
	sysexitticks   int64    // cputicks when syscall has returned (for tracing)
	traceseq       uint64   // trace event sequencer
	tracelastp     puintptr // last P emitted an event for this goroutine
	lockedm        muintptr
	sig            uint32
	writebuf       []byte
	sigcode0       uintptr
	sigcode1       uintptr
	sigpc          uintptr
	gopc           uintptr         // pc of go statement that created this goroutine
	ancestors      *[]ancestorInfo // ancestor information goroutine(s) that created this goroutine (only used if debug.tracebackancestors)
	startpc        uintptr         // pc of goroutine function
	racectx        uintptr
	waiting        *sudog         // sudog structures this g is waiting on (that have a valid elem ptr); in lock order
	cgoCtxt        []uintptr      // cgo traceback context
	labels         unsafe.Pointer // profiler labels
	timer          *timer         // cached timer for time.Sleep
	selectDone     uint32         // are we participating in a select and did someone win the race?

	// Per-G GC state

	// gcAssistBytes is this G&amp;#39;s GC assist credit in terms of
	// bytes allocated. If this is positive, then the G has credit
	// to allocate gcAssistBytes bytes without assisting. If this
	// is negative, then the G must correct this by performing
	// scan work. We track this in bytes to make it fast to update
	// and check for debt in the malloc hot path. The assist ratio
	// determines how this corresponds to scan work debt.
	gcAssistBytes int64
}

type m struct {
	g0      *g     // goroutine with scheduling stack
	morebuf gobuf  // gobuf arg to morestack
	divmod  uint32 // div/mod denominator for arm - known to liblink

	// Fields not known to debuggers.
	procid        uint64       // for debuggers, but offset not hard-coded
	gsignal       *g           // signal-handling g
	goSigStack    gsignalStack // Go-allocated signal handling stack
	sigmask       sigset       // storage for saved signal mask
	tls           [6]uintptr   // thread-local storage (for x86 extern register)
	mstartfn      func()
	curg          *g       // current running goroutine
	caughtsig     guintptr // goroutine running during fatal signal
	p             puintptr // attached p for executing go code (nil if not executing go code)
	nextp         puintptr
	oldp          puintptr // the p that was attached before executing a syscall
	id            int64
	mallocing     int32
	throwing      int32
	preemptoff    string // if != &amp;#34;&amp;#34;, keep curg running on this m
	locks         int32
	dying         int32
	profilehz     int32
	spinning      bool // m is out of work and is actively looking for work
	blocked       bool // m is blocked on a note
	newSigstack   bool // minit on C thread called sigaltstack
	printlock     int8
	incgo         bool   // m is executing a cgo call
	freeWait      uint32 // if == 0, safe to free g0 and delete m (atomic)
	fastrand      [2]uint32
	needextram    bool
	traceback     uint8
	ncgocall      uint64      // number of cgo calls in total
	ncgo          int32       // number of cgo calls currently in progress
	cgoCallersUse uint32      // if non-zero, cgoCallers in use temporarily
	cgoCallers    *cgoCallers // cgo traceback if crashing in cgo call
	park          note
	alllink       *m // on allm
	schedlink     muintptr
	lockedg       guintptr
	createstack   [32]uintptr // stack that created this thread.
	lockedExt     uint32      // tracking for external LockOSThread
	lockedInt     uint32      // tracking for internal lockOSThread
	nextwaitm     muintptr    // next m waiting for lock
	waitunlockf   func(*g, unsafe.Pointer) bool
	waitlock      unsafe.Pointer
	waittraceev   byte
	waittraceskip int
	startingtrace bool
	syscalltick   uint32
	freelink      *m // on sched.freem

	// these are here because they are too large to be on the stack
	// of low-level NOSPLIT functions.
	libcall   libcall
	libcallpc uintptr // for cpu profiler
	libcallsp uintptr
	libcallg  guintptr
	syscall   libcall // stores syscall parameters on windows

	vdsoSP uintptr // SP for traceback while in VDSO call (0 if not in call)
	vdsoPC uintptr // PC for traceback while in VDSO call

	// preemptGen counts the number of completed preemption
	// signals. This is used to detect when a preemption is
	// requested, but fails. Accessed atomically.
	preemptGen uint32

	// Whether this is a pending preemption signal on this M.
	// Accessed atomically.
	signalPending uint32

	dlogPerM

	mOS

	// Up to 10 locks held by this m, maintained by the lock ranking code.
	locksHeldLen int
	locksHeld    [10]heldLockInfo
}

type p struct {
	id          int32
	status      uint32 // one of pidle/prunning/...
	link        puintptr
	schedtick   uint32     // incremented on every scheduler call
	syscalltick uint32     // incremented on every system call
	sysmontick  sysmontick // last tick observed by sysmon
	m           muintptr   // back-link to associated m (nil if idle)
	mcache      *mcache
	pcache      pageCache
	raceprocctx uintptr

	deferpool    [5][]*_defer // pool of available defer structs of different sizes (see panic.go)
	deferpoolbuf [5][32]*_defer

	// Cache of goroutine ids, amortizes accesses to runtime·sched.goidgen.
	goidcache    uint64
	goidcacheend uint64

	// Queue of runnable goroutines. Accessed without lock.
	runqhead uint32
	runqtail uint32
	runq     [256]guintptr
	// runnext, if non-nil, is a runnable G that was ready&amp;#39;d by
	// the current G and should be run next instead of what&amp;#39;s in
	// runq if there&amp;#39;s time remaining in the running G&amp;#39;s time
	// slice. It will inherit the time left in the current time
	// slice. If a set of goroutines is locked in a
	// communicate-and-wait pattern, this schedules that set as a
	// unit and eliminates the (potentially large) scheduling
	// latency that otherwise arises from adding the ready&amp;#39;d
	// goroutines to the end of the run queue.
	runnext guintptr

	// Available G&amp;#39;s (status == Gdead)
	gFree struct {
		gList
		n int32
	}

	sudogcache []*sudog
	sudogbuf   [128]*sudog

	// Cache of mspan objects from the heap.
	mspancache struct {
		// We need an explicit length here because this field is used
		// in allocation codepaths where write barriers are not allowed,
		// and eliminating the write barrier/keeping it eliminated from
		// slice updates is tricky, moreso than just managing the length
		// ourselves.
		len int
		buf [128]*mspan
	}

	tracebuf traceBufPtr

	// traceSweep indicates the sweep events should be traced.
	// This is used to defer the sweep start event until a span
	// has actually been swept.
	traceSweep bool
	// traceSwept and traceReclaimed track the number of bytes
	// swept and reclaimed by sweeping in the current sweep loop.
	traceSwept, traceReclaimed uintptr

	palloc persistentAlloc // per-P to avoid mutex

	_ uint32 // Alignment for atomic fields below

	// The when field of the first entry on the timer heap.
	// This is updated using atomic functions.
	// This is 0 if the timer heap is empty.
	timer0When uint64

	// Per-P GC state
	gcAssistTime         int64    // Nanoseconds in assistAlloc
	gcFractionalMarkTime int64    // Nanoseconds in fractional mark worker (atomic)
	gcBgMarkWorker       guintptr // (atomic)
	gcMarkWorkerMode     gcMarkWorkerMode

	// gcMarkWorkerStartTime is the nanotime() at which this mark
	// worker started.
	gcMarkWorkerStartTime int64

	// gcw is this P&amp;#39;s GC work buffer cache. The work buffer is
	// filled by write barriers, drained by mutator assists, and
	// disposed on certain GC state transitions.
	gcw gcWork

	// wbBuf is this P&amp;#39;s GC write barrier buffer.
	//
	// TODO: Consider caching this in the running G.
	wbBuf wbBuf

	runSafePointFn uint32 // if 1, run sched.safePointFn at next safe point

	// Lock for timers. We normally access the timers while running
	// on this P, but the scheduler can also do it from a different P.
	timersLock mutex

	// Actions to take at some time. This is used to implement the
	// standard library&amp;#39;s time package.
	// Must hold timersLock to access.
	timers []*timer

	// Number of timers in P&amp;#39;s heap.
	// Modified using atomic instructions.
	numTimers uint32

	// Number of timerModifiedEarlier timers on P&amp;#39;s heap.
	// This should only be modified while holding timersLock,
	// or while the timer status is in a transient state
	// such as timerModifying.
	adjustTimers uint32

	// Number of timerDeleted timers in P&amp;#39;s heap.
	// Modified using atomic instructions.
	deletedTimers uint32

	// Race context used while executing timer functions.
	timerRaceCtx uintptr

	// preempt is set to indicate that this P should be enter the
	// scheduler ASAP (regardless of what G is running on it).
	preempt bool

	pad cpu.CacheLinePad
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;gmp模型的一些概念&#34;&gt;GMP模型的一些概念&lt;/h3&gt;
&lt;p&gt;上面M中有两个g需要关注下，curg和g0。
curg就是M当前绑定的G。
g0是带有调度栈的goroutine，普通的G的栈是分配在堆上的可增长的栈，而g0的栈是M对应的线程的栈。所有调度相关的代码，会先切换到该goroutine的栈中执行。即，线程的栈也是用的g实现，而不是使用的OS。&lt;/p&gt;</description>
    </item>
    <item>
      <title>DNS</title>
      <link>https://duck-dd.github.io/posts/dns/</link>
      <pubDate>Thu, 13 May 2021 00:00:00 +0000</pubDate>
      <guid>https://duck-dd.github.io/posts/dns/</guid>
      <description>&lt;h1 id=&#34;dns挺好啥是dns&#34;&gt;DNS，挺好，啥是DNS？&lt;/h1&gt;
&lt;h2 id=&#34;一些概念&#34;&gt;一些概念&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;FQDN: Fully Qualified Domain Name，全限定域名，同时带有主机名和域名的名称（通过符号“.”），例如一个FQDN是www.baidu.com，www是主机名，baidu.com是域名。再举例，我是海淀吴彦祖，你是**吴彦祖，但是我们还知道，有个人就叫吴彦祖，这么多吴彦祖我们都没有混淆，因为名字前面加上了地域，也就是域名。从逻辑上看FQDN，就是主机名的完整表达，类似绝对路径，通过一个FQDN我们可以在全网内锁定主机位置。&lt;/li&gt;
&lt;li&gt;cache only DNS server : 有.的zone file的DNS服务器，本身没有任何解析数据，完全靠查询来获取数据源&lt;/li&gt;
&lt;li&gt;forwarding DNS server : 连.的zone file都没有，完全靠向上层查询获取数据；当使用forwarding功能时，即使本身有.的zone file，也不会向.查询，该DNS server还是会将查询完全委托给上层。&lt;/li&gt;
&lt;li&gt;CIDR:Classless Inter-Domain Routing, 无类域间路由，不按固定的字节来划分网络编号，可以使用IP地址中任何相邻位的数字作为网络编号，例如某机构需要2个B类网络大小的空间，那么可以使用前15位作为网络编号，例如127.127.0.0/15
&lt;ul&gt;
&lt;li&gt;A类,B类,C类网络：A类网络以IP地址的第一个字节(前8位)作为网络编号,剩下的24位为主机;B类网络前两个字节为网络编号;C类网络前三个字节为网络编号&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;dns做什么&#34;&gt;DNS做什么&lt;/h2&gt;
&lt;p&gt;ipv4 32bit，ipv6 128bit，即使转成10/16进制也没人记得住，但是人类的头脑善于记录名字，所以可以搞一个名字跟IP对应，名字跟IP的对应关系解析，就是DNS提供的服务。&lt;/p&gt;
&lt;p&gt;主机名的解析有一个发展的过程。&lt;/p&gt;
&lt;p&gt;最初没有DNS人们如何记住各个服务名字跟IP的对应关系呢？就是写在/etc/hosts文件里，自己写麻烦，那就统一写到中心，使用的时候从中心拉取。&lt;/p&gt;
&lt;p&gt;这个中心就是internic，主机名IP对应关系修改时，注册到internic中；用户准备上网之前先去internic把最新的文件拉下来，放在自己的/etc/hosts。&lt;/p&gt;
&lt;p&gt;这种方式问题很多：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;例如internic拉取的文件会很大，每次打开电脑先拉个100G的文件然后再开始上网，就算你磁盘扛得住，你的网络不够好也很难受（因为你不能明确说明自己上网需要的主机名，只能拉全量，互联网业务增长该文件会越来越大）&lt;/li&gt;
&lt;li&gt;例如这种方式是静态的，需要用户主动触发更新行为（你总不能让一个人开机默认就去下载100G的文件，他不可能给你授权的）；试想一下，一个网瘾少年下午6点睡眼惺忪的起床，打开电脑先从internic下载了半个小时文件，期间去洗漱吃了早饭，然后开开心心开始打游戏，突然，游戏掉线了，上贴吧一查，大家都说快去重新拉取internic的hosts文件呀，游戏域名被友商攻击换域名了，这还好，少年骂骂咧咧下载个文件就完事了，要是贴吧都上不去就更让人懵逼了&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;时代的进步总是聪明人推动的。Berkeley一个同学就觉得这种方式不太行，于是他就搞出一套BIND系统提供DNS服务。&lt;/p&gt;
&lt;h2 id=&#34;bindberkeley-internet-name-domain&#34;&gt;BIND，Berkeley Internet Name Domain&lt;/h2&gt;
&lt;h3 id=&#34;bind管理方式&#34;&gt;BIND管理方式&lt;/h3&gt;
&lt;p&gt;BIND是一套阶层式的管理主机名与IP对应关系的系统。&lt;/p&gt;
&lt;p&gt;阶层式？可以简单理解为树状结构的不同层级，下面来简单分析下阶层式。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://duck-dd.github.io/images/dns/1.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;以www.baidu.com为例，最上层根服务器，domain name是&amp;quot;.&amp;quot;，然后有三个hostname &amp;ldquo;net com cn&amp;rdquo;，再到第三层，hostname分别是pdd baidu tencent，此时domain name为.com. ，以此类推。。。需要注意的是，不是每一个&amp;quot;.&amp;ldquo;都拆分domain name&amp;amp;hostname，例如上图  video.www.baidu.com ，其中domain name为baidu.com.，hostname为video.www。按照上述方式分层，每一个服务节点（权威）只负责自己的一小撮域名，这就避免了大量数据集中的问题。&lt;/p&gt;
&lt;p&gt;DNS阶层系统的最上方是一个&amp;rdquo;.&amp;quot;，root，是根服务器，本质上讲，这里的&amp;quot;.&amp;ldquo;后面其实是空标签，这是为root保留的；根服务器下一层管理的是Top Level Domains(TLD)，例如com. net. org.等等。&lt;/p&gt;
&lt;p&gt;每个上一层的DNS服务器，所记录的信息，只有下一层的主机名；再下一层，授权给再再下层某个主机管理，这就是分层管理；DNS分层最多到127层(实际上不会用到这么多)，每一层最多63个字符(不包括&amp;rdquo;.&amp;quot;)；同一层内不允许同名，确保唯一性。&lt;/p&gt;
&lt;h3 id=&#34;bind查询流程&#34;&gt;BIND查询流程&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;当浏览器输入 &lt;a href=&#34;https://www.baidu.com&#34;&gt;https://www.baidu.com&lt;/a&gt; ，先查浏览器缓存，再查/etc/hosts文件，都找不到www.baidu.com的解析时，会根据/etc/resolv.conf文件内配置的DNS服务器地址，去进行DNS解析，询问www.baidu.com的A记录&lt;/li&gt;
&lt;li&gt;client第一步找到的DNS服务器通常为运营商提供的local DNS服务器，local DNS作为名称服务器，接收client端的递归查询请求，若local DNS服务器自身没有www.baidu.com的解析结果，则向.DNS服务器发起解析请求，询问www.baidu.com是啥A记录呢？
&lt;ul&gt;
&lt;li&gt;其实递归查询实际过程中，local DNS若未命中缓存，并不是直接查询根服务器，他会寻找已知最近的名称服务器(待实验确认)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;.并不知道www.baidu.com的IP，它会告诉你我只知道.com，IP给你，你去问它吧&lt;/li&gt;
&lt;li&gt;然后local DNS获取到了.com的信息后，开始向.com询问www.baidu.com的解析结果&lt;/li&gt;
&lt;li&gt;.com也不知道www.baidu.com的IP地址，它会说，我只认识baidu.com，你去问它吧
&lt;ul&gt;
&lt;li&gt;.com返回的一般是baidu.com的多个NS域名(及其IP,胶水记录)，如下例图，那么如何选择权威呢？BIND名称服务器使用RTT(roundtrip time)的度量方式来选择对同一区域中的名称服务器进行选择，即选择RTT最小的那个名称服务器(dig +trace抓包并没看到对RTT的探测，现象上看是从ns*.baidu.com里面随机选择的？)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://duck-dd.github.io/images/dns/2.jpg&#34;&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
