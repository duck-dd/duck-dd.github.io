<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Home Page</title>
    <link>https://duck-dd.github.io/posts/</link>
    <description>Recent content in Posts on Home Page</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>ztq.</copyright>
    <lastBuildDate>Sun, 22 Aug 2021 09:17:38 +0800</lastBuildDate><atom:link href="https://duck-dd.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>限流算法(TO BE DONE)</title>
      <link>https://duck-dd.github.io/posts/current-limiter/</link>
      <pubDate>Sun, 22 Aug 2021 09:17:38 +0800</pubDate>
      
      <guid>https://duck-dd.github.io/posts/current-limiter/</guid>
      <description>计数器 令牌桶 漏桶 </description>
    </item>
    
    <item>
      <title>缓存淘汰算法(TO BE DONE)</title>
      <link>https://duck-dd.github.io/posts/cache-elimination-algorithm/</link>
      <pubDate>Sun, 22 Aug 2021 09:06:48 +0800</pubDate>
      
      <guid>https://duck-dd.github.io/posts/cache-elimination-algorithm/</guid>
      <description>硬怼 FIFO 时间 LRU LRU-2 2Q 频率 LFU LIRS 时间和频率 FBR LRFU ALRFU 临时距离分布 MQ 自适应 ARC </description>
    </item>
    
    <item>
      <title>Golang schedule</title>
      <link>https://duck-dd.github.io/posts/golang-schedule/</link>
      <pubDate>Sat, 21 Aug 2021 22:27:31 +0800</pubDate>
      
      <guid>https://duck-dd.github.io/posts/golang-schedule/</guid>
      <description>写在前面 如果哪里写错辣了您的眼睛，请务必评论区批评指正，感激不尽。
留了一些TODO。
runtime包实现了所有goroutine scheduler、memory allocator、garbage collector细节，理论上可以从runtime包获取一切信息，没有直接怼源码，而是站在巨人的肩膀上（直接吃大佬们吃剩下的），看大家的各种说法，整理一下。
搜集到的材料，大家都是基于不同的go版本做的分析，而go版本迭代调度算法也在持续更新，所以整理的可能有些乱。但是可以保证的是，所有材料都是GM-&amp;gt;GMP演化后的材料。
GM go1.1版本以前，调度使用GM模型，如下图所示。简单的理解GM模型，就是有一个始终执行的调度函数schedule不停的执行调度计算，当某个M的G执行完成了，调度器就把这个M放回M队列，可绑定执行其他G（如果某个M+G发生了syscall，那么本来并发度是通过M数量控制的，此时并发度就降低了？）；如果G执行过程中创建新的G，会将新的G放入到G全局可执行队列中。G全局可执行队列的操作有一把全局锁，这导致了各个M对G全局队列的操作存在严重的竞争。
下面这段完全是我的臆测，请别太相信：
 简单概括呢，所以可以认为有：
 G全局可执行队列(以下也可能简称G可执行队列) M可用队列  调度器要做的事就是：
 从G的可执行队列取G并从M的可用队列取M，将二者绑定开始执行G 对于已经执行完的G，销毁G并立即将M释放回M可用队列供后续使用   那么GM模型有哪些问题呢？
 (重点问题)单一的全局mutex(sched.lock)和集中状态管理  mutex需要保护所有与全局goroutine队列相关操作(创建、完成、重排等等)，竞争严重   (重点问题)per-M内存(M.mcache)问题  每个M都需要一个mcache，会导致资源消耗过大(每个mcache可以吸纳到2MB的内存缓存和其他缓存)  举个栗子，一个陷入syscall的M并不需要使用cache，但是在全部的M中，陷入系统调用的M与执行goroutine的M的比例可能是N:1(N&amp;gt;&amp;gt;1)，这就导致了N/(N+1)比例的mcache在闲置   数据局部性差:  举个栗子，M1执行G1，此时创建了G2，G2通常是立刻进入了G全局可执行队列，而此时M1还在执行G1，所以G2通常被其他M执行，但是G1和G2通常强相关，所以G2最好也在M1上执行，因为G2对M1的缓存命中率更高     goroutine传递问题  goroutine(G)交接(G.nextg)，M之间会经常交接可运行的G 再通俗点说，就是G空转，本来能够好好在一个M上执行完，但是由于全局队列的存在，G一旦回全局队列了，下次就不知道被哪个M取走了，所以叫“空转”；M加载G的上下文是有开销的，所以空转会导致性能下降   频繁的线程阻塞/解阻塞  syscalls情况下，线程经常被阻塞和解阻塞，增加了很多额外开销 通俗点说，M+G syscall，M阻塞，syscall完成后，M解阻塞继续执行G（如果是通过M数量控制并发度，这是不是就导致了并发度降低？）    GMP 基于以上说的GM的问题，go1.1以后开始使用GMP调度模型。 G、M、P的定义如下(***/src/runtime/runtime2.go)。
type g struct { // Stack parameters. // stack describes the actual stack memory: [stack.</description>
    </item>
    
    <item>
      <title>剪枝(to be done)</title>
      <link>https://duck-dd.github.io/posts/pruning/</link>
      <pubDate>Sat, 07 Aug 2021 15:39:51 +0800</pubDate>
      
      <guid>https://duck-dd.github.io/posts/pruning/</guid>
      <description>to be done</description>
    </item>
    
    <item>
      <title>五个基本算法(to be done)</title>
      <link>https://duck-dd.github.io/posts/five-basic-algorithms/</link>
      <pubDate>Sat, 07 Aug 2021 15:11:45 +0800</pubDate>
      
      <guid>https://duck-dd.github.io/posts/five-basic-algorithms/</guid>
      <description>1 分治 2 动态规划 3 贪心 4 回溯 5 分支限界 </description>
    </item>
    
    <item>
      <title>DFS&amp;BFS(to be done)</title>
      <link>https://duck-dd.github.io/posts/dfsbfs/</link>
      <pubDate>Sat, 07 Aug 2021 13:55:53 +0800</pubDate>
      
      <guid>https://duck-dd.github.io/posts/dfsbfs/</guid>
      <description>1 DFS(deep first search) 2 BFS(breadth first search) </description>
    </item>
    
    <item>
      <title>排序(to be done)</title>
      <link>https://duck-dd.github.io/posts/sort/</link>
      <pubDate>Sat, 07 Aug 2021 13:42:19 +0800</pubDate>
      
      <guid>https://duck-dd.github.io/posts/sort/</guid>
      <description>1 冒泡排序 2 选择排序 3 插入排序 4 归并排序 5 快速排序 6 堆排序 7 希尔排序 8 计数排序 9 桶排序(箱排序) 10 基数排序 </description>
    </item>
    
    <item>
      <title>Golang Tips For Me (continuously updated)</title>
      <link>https://duck-dd.github.io/posts/go-tips/</link>
      <pubDate>Fri, 02 Jul 2021 23:17:21 +0800</pubDate>
      
      <guid>https://duck-dd.github.io/posts/go-tips/</guid>
      <description>说明：
持续更新(标题含TODO关键字的小节，都会以topic开始，后续会持续完善topic)。记录内容是一些对我而言：
 小的骚操作(可能也包含其背后的实现原理) 容易理解偏差的知识点 冷门的知识点   Golang代码执行顺序 没有并发，一个顺序逻辑，CPU真正执行指令不一定与编码顺序完全一致，Go的编译器会做优化，前提是会解决依赖逻辑，看起来是“顺序执行”这一假设。
了解更多可查看Golang内存模型规范。
 internal包 internal包，只能被和internal目录有同一个父目录的包所导入。 例如，net/http/internal/chunked内部包只能被net/http/httputil或net/http包导入，但是不能被net/url包导入。不过net/url包却可以导入net/http/httputil包。
 变量交换 i, j = j, i // 交换 i 和 j 的值  for循环有其他识别break的关键字 for循环内有其他识别break的关键字时，其他关键字内的break会被其识别而不会跳出for，以下用select举例，switch同理。
for { select { case &amp;lt;-sigChan: // exit for break default: // do something } } 以上break并不能退出for循环，可以使用标签或goto解决：
// 1 标签 FOR: for { select { case &amp;lt;-sigChan: // exit for break FOR default: // do something } } ---------------------------- // 2 goto for { select { case &amp;lt;-sigChan: // exit for goto ENDFOR default: // do something } } ENDFOR:  读取stdin(刷题别再因为stdin踩坑了喂) fmt包内 Scan系列 SScan系列 Fscan系列如下：</description>
    </item>
    
    <item>
      <title>The Go Programming Language</title>
      <link>https://duck-dd.github.io/posts/the-go-programming-language/</link>
      <pubDate>Fri, 25 Jun 2021 22:35:37 +0800</pubDate>
      
      <guid>https://duck-dd.github.io/posts/the-go-programming-language/</guid>
      <description>说明： 《The Go Programming Language》 所有源码见: gopl.io
 0 前言 GO演进，B-&amp;gt;C-&amp;gt;GO。
GO官方定位：Go是一个开源的编程语言，它很容易用于构建简单、可靠和高效的软件。
0.1 GO语言起源 下图展示了有哪些早期语言对Go语言的设计产生了重要影响。 0.2 GO语言项目 Go语言的动态栈使得轻量级线程goroutine的初始栈可以很小，因此，创建一个goroutine的代价很小，创建百万级的goroutine完全是可行的。
Go语言的标准库（通常被称为语言自带的电池），提供了清晰的构建模块和公共接口，包含I/O操作、文本处理、图像、密码学、网络和分布式应用程序等，并支持许多标准化的文件格式和编解码协议。
Go语言源代码本身就包含了构建规范。
1 入门 把Go写的像Go。
1.1 Hello, World package main import &amp;quot;fmt&amp;quot; func main() { fmt.Println(&amp;quot;Hello, World&amp;quot;) } Go是编译型语言，静态编译。
Go语言原生支持Unicode，可处理任何语言。
Go的工具都通过&amp;quot;go&amp;quot;命令调用，具体可&amp;quot;go help&amp;quot;。
Go语言通过包(package)组织。包引用使用&amp;quot;import&amp;quot;。
&amp;ldquo;main&amp;quot;包的&amp;quot;main&amp;quot;函数是这个程序执行的入口。
Go语言不需要在语句或者声明的末尾添加分号，除非一行上有多条语句。实际上，编译器会主动把特定符号后的换行符转换为分号, 因此换行符添加的位置会影响Go代码的正确解析。
1.2 命令行参数 Go区间索引左闭右开。 自增语句i++给i加1；这和i += 1以及i = i + 1都是等价的。对应的还有i&amp;ndash;给i减1。它们是语句，而不像C系的其它语言那样是表达式。所以j = i++非法，而且++和&amp;ndash;都只能放在变量名后面，因此&amp;ndash;i也非法。
Go语言只有for循环这一种循环语句，for循环有多种形式。
// situation 1 for initialization; condition; post { // zero or more statements } // situation 2 // a traditional &amp;quot;while&amp;quot; loop for condition { // .</description>
    </item>
    
    <item>
      <title>DNS,挺好,啥是DNS?</title>
      <link>https://duck-dd.github.io/posts/dns-bind/</link>
      <pubDate>Thu, 13 May 2021 20:53:32 +0800</pubDate>
      
      <guid>https://duck-dd.github.io/posts/dns-bind/</guid>
      <description>DNS，挺好，啥是DNS？ 一些概念  FQDN: Fully Qualified Domain Name，全限定域名，同时带有主机名和域名的名称（通过符号“.”），例如一个FQDN是www.baidu.com，www是主机名，baidu.com是域名。再举例，我是海淀吴彦祖，你是**吴彦祖，但是我们还知道，有个人就叫吴彦祖，这么多吴彦祖我们都没有混淆，因为名字前面加上了地域，也就是域名。从逻辑上看FQDN，就是主机名的完整表达，类似绝对路径，通过一个FQDN我们可以在全网内锁定主机位置。 cache only DNS server : 有.的zone file的DNS服务器，本身没有任何解析数据，完全靠查询来获取数据源 forwarding DNS server : 连.的zone file都没有，完全靠向上层查询获取数据；当使用forwarding功能时，即使本身有.的zone file，也不会向.查询，该DNS server还是会将查询完全委托给上层。 CIDR:Classless Inter-Domain Routing, 无类域间路由，不按固定的字节来划分网络编号，可以使用IP地址中任何相邻位的数字作为网络编号，例如某机构需要2个B类网络大小的空间，那么可以使用前15位作为网络编号，例如127.127.0.0/15  A类,B类,C类网络：A类网络以IP地址的第一个字节(前8位)作为网络编号,剩下的24位为主机;B类网络前两个字节为网络编号;C类网络前三个字节为网络编号    DNS做什么 ipv4 32bit，ipv6 128bit，即使转成10/16进制也没人记得住，但是人类的头脑善于记录名字，所以可以搞一个名字跟IP对应，名字跟IP的对应关系解析，就是DNS提供的服务。
主机名的解析有一个发展的过程。
最初没有DNS人们如何记住各个服务名字跟IP的对应关系呢？就是写在/etc/hosts文件里，自己写麻烦，那就统一写到中心，使用的时候从中心拉取。
这个中心就是internic，主机名IP对应关系修改时，注册到internic中；用户准备上网之前先去internic把最新的文件拉下来，放在自己的/etc/hosts。
这种方式问题很多：
 例如internic拉取的文件会很大，每次打开电脑先拉个100G的文件然后再开始上网，就算你磁盘扛得住，你的网络不够好也很难受（因为你不能明确说明自己上网需要的主机名，只能拉全量，互联网业务增长该文件会越来越大） 例如这种方式是静态的，需要用户主动触发更新行为（你总不能让一个人开机默认就去下载100G的文件，他不可能给你授权的）；试想一下，一个网瘾少年下午6点睡眼惺忪的起床，打开电脑先从internic下载了半个小时文件，期间去洗漱吃了早饭，然后开开心心开始打游戏，突然，游戏掉线了，上贴吧一查，大家都说快去重新拉取internic的hosts文件呀，游戏域名被友商攻击换域名了，这还好，少年骂骂咧咧下载个文件就完事了，要是贴吧都上不去就更让人懵逼了  时代的进步总是聪明人推动的。Berkeley一个同学就觉得这种方式不太行，于是他就搞出一套BIND系统提供DNS服务。
BIND，Berkeley Internet Name Domain BIND管理方式 BIND是一套阶层式的管理主机名与IP对应关系的系统。
阶层式？可以简单理解为树状结构的不同层级，下面来简单分析下阶层式。
以www.baidu.com为例，最上层根服务器，domain name是&amp;quot;.&amp;quot;，然后有三个hostname &amp;ldquo;net com cn&amp;rdquo;，再到第三层，hostname分别是pdd baidu tencent，此时domain name为.com. ，以此类推。。。需要注意的是，不是每一个&amp;quot;.&amp;ldquo;都拆分domain name&amp;amp;hostname，例如上图 video.www.baidu.com ，其中domain name为baidu.com.，hostname为video.www。按照上述方式分层，每一个服务节点（权威）只负责自己的一小撮域名，这就避免了大量数据集中的问题。
DNS阶层系统的最上方是一个&amp;rdquo;.&amp;quot;，root，是根服务器，本质上讲，这里的&amp;quot;.&amp;ldquo;后面其实是空标签，这是为root保留的；根服务器下一层管理的是Top Level Domains(TLD)，例如com. net. org.等等。</description>
    </item>
    
    <item>
      <title>新盘购房攻略(to be done)</title>
      <link>https://duck-dd.github.io/posts/house/</link>
      <pubDate>Tue, 11 May 2021 23:42:10 +0800</pubDate>
      
      <guid>https://duck-dd.github.io/posts/house/</guid>
      <description>第一阶段，选房  购房时间，购房资格  如何选择中介(中介费率)or直接售楼处，如何谈价格  城市选择，市内区域选择  开发商，承建商，物业(后期物业费标准)，预售证，五证，房屋性质  楼座，楼层，户型，隔音防水材料，墙体厚度&amp;amp;承重墙分布，容积率，出房率，绿地率，公摊面积，房屋面积，套内面积，使用面积  周边：周边配套(教育/医疗/商业)  车位配比？真人车分流？电梯有-1？车库有本？地库有储物间？一层有小庭院？顶楼层高会不会更高？  二手房好卖？  第二阶段，付款  合同，税  贷款办理(所需材料？)  房本发放时间(包括与中介协商下房本后支付中介费)  契税什么时候交？  中介费交多少？供暖费怎么交？装修押金多少？  </description>
    </item>
    
  </channel>
</rss>
