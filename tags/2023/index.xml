<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>2023 on Duck</title>
    <link>https://duck-dd.github.io/tags/2023/</link>
    <description>Recent content in 2023 on Duck</description>
    <image>
      <title>Duck</title>
      <url>https://duck-dd.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://duck-dd.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- 0.147.8</generator>
    <language>en</language>
    <lastBuildDate>Sat, 24 Jun 2023 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://duck-dd.github.io/tags/2023/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>装修那些事儿</title>
      <link>https://duck-dd.github.io/posts/%E8%A3%85%E4%BF%AE/</link>
      <pubDate>Sat, 24 Jun 2023 00:00:00 +0000</pubDate>
      <guid>https://duck-dd.github.io/posts/%E8%A3%85%E4%BF%AE/</guid>
      <description>&lt;p&gt;这个行业，是一个没有监管，没有行业标准(有的大部分也是扯淡)，群魔乱舞的行业，这行业人的话，不要相信，不要相信，不要相信&lt;/p&gt;
&lt;p&gt;从我自身经历来说，这件事真的不复杂，完全不值他现在的价钱；一开始这件事很神秘，你觉得付多少钱都是合理的，但真不是这样，到处都是骗钱的；所以装修开始前真正的第一件事，就是你要了解一下背景评估一下工作量，放心大胆的去砍价吧&lt;/p&gt;
&lt;p&gt;本文从自己的亲身经历出发来分析一下装修这件令人头疼的事情，没有展开太多的细节，只以各个阶段的典型选择题为切入点，欢迎指正和交流，预祝你获得你的梦中情屋～&lt;/p&gt;
&lt;h1 id=&#34;全包-or-半包&#34;&gt;全包 or 半包&lt;/h1&gt;
&lt;p&gt;如果你刚开始考虑装修，那你一定是特别开心和兴奋的。&lt;/p&gt;
&lt;p&gt;你面临的第一个问题大概就是，&amp;ldquo;半包&amp;rdquo; or &amp;ldquo;全包&amp;rdquo;（自己找工人的方式，不太了解就不谈了）；很多声音会告诉你说，全包这种完全黑盒的行为会有太多坑了，给你用的东西都是差的balabala&lt;/p&gt;
&lt;p&gt;但是，如果你想省心，或者在装修的这几个月里你没有太多的时间精力能够投入进这件事，那么还是建议你咬咬牙忽略这些有一丢丢危言耸听的说法，果断的选择全包&lt;/p&gt;
&lt;p&gt;如果你选择了全包，那么我们对最终效果的确认无非靠两个关键指标&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 是不是我想要的样子&lt;/li&gt;
&lt;li&gt;2 是不是环保&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为了第一点，你需要查看素材库确认好自己喜欢的样子，跟设计师做充分的沟通，并在施工过程的关键节点约设计师一起去现场做阶段性的沟通和double check，因为省心，所以你做的功课可能不多，其实这比较依赖设计师的专业性&lt;/p&gt;
&lt;p&gt;为了第二点，你需要做的功课是，查一查装修过程中哪些使用到的材料可能会不环保，然后直接在合同里声明好这些材料具体使用哪些品牌的哪些型号，并在这些材料入场时做好检查(其实可以找类似&amp;quot;监工&amp;quot;的角色来帮助你执行，应该总比你完全不去现场要好)&lt;/p&gt;
&lt;p&gt;朋友，如果你选择了半包，那你是真的勇士，对你表示敬佩，以下的讨论咱们就默认你已经做了大量的背景&amp;amp;功课的学习。&lt;/p&gt;
&lt;h1 id=&#34;入户门&#34;&gt;入户门&lt;/h1&gt;
&lt;p&gt;换！你99%不喜欢开发商的这个，相比换锁，就干脆直接换门吧&lt;/p&gt;
&lt;h1 id=&#34;窗户&#34;&gt;窗户&lt;/h1&gt;
&lt;p&gt;如果允许，换！拉满配(可能很多地方政策不允许动外立面，那就没办法了)&lt;/p&gt;
&lt;h1 id=&#34;隔音&#34;&gt;隔音&lt;/h1&gt;
&lt;p&gt;如果你对声音要求很高，考虑做全屋音响，那是肯定得做了&lt;/p&gt;
&lt;p&gt;如果你没有考虑做全屋音响，那么我还是强！烈！建！议！做！隔！音！&lt;/p&gt;
&lt;h1 id=&#34;全屋定制-or-成品家具&#34;&gt;全屋定制 or 成品家具&lt;/h1&gt;
&lt;p&gt;个人观点，全屋定制真的不咋地，建议祛魅，认真的去逛一逛成品家具市场&lt;/p&gt;
&lt;p&gt;还往下看，你果然还是跟我一样，头铁的选择了全屋定制，那这个子方向发个千八百个论文感觉都泛不起一点水花；
商家贩卖的焦虑点：甲醛，苯系化合物；你要想死磕，得先学化学&lt;/p&gt;
&lt;p&gt;标准：国外国内太多标准，但有一点个人觉得有参考意义，就是 &lt;code&gt;抽检&lt;/code&gt; &amp;amp; &lt;code&gt;送检&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;品牌选择：大商场大品牌的品牌溢价确实太高了，而且也确实代加工，所以有判断能力那就果断直接找工厂吧&lt;/p&gt;
&lt;p&gt;细节不展开讲了，说一点注意点，跟电位/管道做配合要提前做规划，这也是为什么把这个问题放得这么靠前&lt;/p&gt;
&lt;h1 id=&#34;布局&#34;&gt;布局&lt;/h1&gt;
&lt;p&gt;该砸就砸别犹豫(非承重) 新砌墙时考虑好用途，如果有承重需求(例如挂电视 挂柜子等)，考虑好墙体的材料
砌墙后多晾一晾 否则后期墙上面搞得任何东西都容易剥离&lt;/p&gt;
&lt;p&gt;墙的&lt;em&gt;&lt;strong&gt;平&lt;/strong&gt;&lt;/em&gt;的问题，从小白视角来看，就是表面是平面，并且这个平面跟其他平面的角度(一般90度)是正常的，这点不管施工方是冲筋 垂平还是啥方法，总之先讲清楚要求并让他们严格执行&lt;/p&gt;
&lt;p&gt;坐便or蹲便？多个卫生间可以考虑留一个蹲便，不仅健康，而且后期小孩使用也好扩展（这个问题需要提前考虑因为可能影响卫生间地面高度布局）&lt;/p&gt;
&lt;h1 id=&#34;水电&#34;&gt;水电&lt;/h1&gt;
&lt;p&gt;水管线管一定选择最好的品牌的好的型号，避免后期出问题太麻烦&lt;/p&gt;
&lt;p&gt;至于是按使用长度算，还是一口价模式，自己来衡量对比，是否点对点走线？可以看网上大量的分析&lt;/p&gt;
&lt;p&gt;电箱位置挪不挪？如果风水问题(那么你一定是相信这个的)，挪；如果只是为了好看，那后期挺多方法弄好看，可以看看效果自己能不能接受&lt;/p&gt;
&lt;p&gt;前置过滤器：空间允许，就安；拉满配，本身没多贵，影响水压就不好了&lt;/p&gt;
&lt;p&gt;全屋软水：没考虑清楚，就做&lt;/p&gt;
&lt;p&gt;下水：有顾虑该做的位置就做，用不用得上再说&lt;/p&gt;
&lt;p&gt;电位：有顾虑就做，总比后期拉插线板强(70个/100平 ？)&lt;/p&gt;
&lt;p&gt;开关：一开多控别顾虑，想做就做，方便生活&lt;/p&gt;
&lt;p&gt;全屋智能：已经在考虑这个问题了？那就做。。。有点贵，但应了那句话，贵的东西，除了贵，没有其他的毛病&lt;/p&gt;
&lt;p&gt;智能开关记得留零线&lt;/p&gt;
&lt;p&gt;这里不展开讲了，太复杂了，完全可以单开一页的东西，有两个容易忽略的点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 墙面别开长横槽(脑补一下这确实会影响墙的稳定性)&lt;/li&gt;
&lt;li&gt;2 强弱电磁场干扰隔离（物理已经还给老师了，但是避免干扰这个要保持距离还是符合常识的）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;接下来让我们一起进入&lt;strong&gt;木瓦油&lt;/strong&gt;环节&lt;/p&gt;
&lt;h1 id=&#34;全屋吊顶-or-部分吊顶&#34;&gt;全屋吊顶 or 部分吊顶&lt;/h1&gt;
&lt;p&gt;如果考虑做无主灯，那么肯定全屋吊顶&lt;/p&gt;</description>
    </item>
    <item>
      <title>软件架构设计原则</title>
      <link>https://duck-dd.github.io/posts/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/</link>
      <pubDate>Sun, 16 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://duck-dd.github.io/posts/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/</guid>
      <description>&lt;p&gt;每次接手一些老旧系统，总是很头疼，最近想，会不会别人接手了我的系统以后也是一样的感受，想到可能有人每天都在吐槽(骂)我头皮发麻啊&amp;hellip;&lt;/p&gt;
&lt;p&gt;知易行难，其实怎么做好一个后端服务大家都是门清的，只是受限于 &lt;code&gt;排期&lt;/code&gt; &lt;code&gt;业务价值&lt;/code&gt; &lt;code&gt;协作&lt;/code&gt; 等太多因素，往往事与愿违。只能说但行好事莫问前程吧，下面再把这些原则列一下，时刻提醒自己吧；以下原则从个人角度分先后，不是说有重要性区别，而是有些原则很高频，或者很容易被忽略，需要时刻牢记。&lt;/p&gt;
&lt;h1 id=&#34;一-职责逻辑-清晰&#34;&gt;一 职责/逻辑 清晰&lt;/h1&gt;
&lt;h2 id=&#34;单一职责原则single-responsibility-principle-srp&#34;&gt;单一职责原则（Single Responsibility Principle, SRP）&lt;/h2&gt;
&lt;p&gt;每个&lt;code&gt;单元&lt;/code&gt;只负责&lt;em&gt;一件事&lt;/em&gt;。
从总体架构上讲，这个单元是一个子系统，例如订单系统，日志系统；从系统架构上讲，这个单元是一个模块，例如文章管理模块，评论管理模块等；从代码模块内部讲，这个单元是一个组件，一个类，一个struct等。再往下看，一个类还有N多个方法&amp;hellip;
就像分子，原子，质子/电子，夸克&amp;hellip;从宏观到微观的过程，就是我们把一套复杂的系统一点一点拆解开的过程，而每次向下拆解一层的时候，这一层的个体，尽量做到每个都负责一件事&lt;/p&gt;
&lt;h2 id=&#34;迪米特法则law-of-demeter-lod&#34;&gt;迪米特法则（Law of Demeter, LoD）&lt;/h2&gt;
&lt;p&gt;一个模块应尽可能少地了解其他模块的内部细节。
反过来看，一个模块向外不暴露细节，别人就没法了解细节了；所以还是在讲控制耦合。&lt;/p&gt;
&lt;h2 id=&#34;高内聚低耦合high-cohesion-low-coupling&#34;&gt;高内聚，低耦合（High Cohesion, Low Coupling）&lt;/h2&gt;
&lt;p&gt;模块内部的功能紧密相关(高内聚)，模块间通过明确接口交互，依赖关系简单(低耦合)。
明牌了，直接再提醒你一下，控制耦合控制耦合控制耦合&amp;hellip;&lt;/p&gt;
&lt;h2 id=&#34;接口隔离原则interface-segregation-principle-isp&#34;&gt;接口隔离原则（Interface Segregation Principle, ISP）&lt;/h2&gt;
&lt;p&gt;客户端不应被迫依赖它不需要的接口，应将大接口拆分为多个专用小接口。
这里不是对使用者的要求，而是对接口提供(设计)者提出要求，在设计对外暴露接口时，要尽可能小，单一，独立，这样使用起来更灵活。
对外是这样的，但是内部接口，说实话我做不到尽可能小。&lt;/p&gt;
&lt;h1 id=&#34;二-破坏性侵入性控制&#34;&gt;二 破坏性(侵入性)控制&lt;/h1&gt;
&lt;h2 id=&#34;开闭原则open-closed-principle-ocp&#34;&gt;开闭原则（Open-Closed Principle, OCP）&lt;/h2&gt;
&lt;p&gt;对扩展开放，对修改关闭。
从我的理解，这条原则更多还是在指导代码层面的设计；世界是动态发展的，没有一成不变的东西，那么对于代码，可扩展是必然的需求，那为什么对修改关闭呢？可能更多还是对原系统的侵入吧，你不知道你的使用方对你做出了怎么样的假设，总之目前为止世界和平，但当你修改了你的行为，假设被打破，世界就崩塌了&lt;/p&gt;
&lt;h2 id=&#34;里氏替换原则liskov-substitution-principle-lsp&#34;&gt;里氏替换原则（Liskov Substitution Principle, LSP）&lt;/h2&gt;
&lt;p&gt;子类必须能无缝替换父类，且不破坏原有系统的正确性。即父类出现的地方，子类可替代，且行为一致。&lt;/p&gt;
&lt;h1 id=&#34;三-依赖管理&#34;&gt;三 依赖管理&lt;/h1&gt;
&lt;h2 id=&#34;分层架构原则layered-architecture-principle&#34;&gt;分层架构原则（Layered Architecture Principle）&lt;/h2&gt;
&lt;p&gt;将系统按职责划分为清晰的层次，层间单向依赖，禁止跨层调用。&lt;/p&gt;
&lt;h2 id=&#34;依赖倒置原则dependency-inversion-principle-dip&#34;&gt;依赖倒置原则（Dependency Inversion Principle, DIP）&lt;/h2&gt;
&lt;p&gt;高层模块不应依赖低层模块，两者都应依赖抽象；抽象不应依赖细节，细节应依赖抽象。&lt;/p&gt;
&lt;h1 id=&#34;四-可扩展性&#34;&gt;四 可扩展性&lt;/h1&gt;
&lt;h2 id=&#34;演进式架构原则evolutionary-architecture&#34;&gt;演进式架构原则（Evolutionary Architecture）&lt;/h2&gt;
&lt;p&gt;架构设计应预留扩展空间，支持系统随业务需求逐步演进，而非追求 “一步到位” 的完美设计。&lt;/p&gt;
&lt;h1 id=&#34;五-安全代码安全服务安全业务安全等&#34;&gt;五 安全(代码安全，服务安全，业务安全等)&lt;/h1&gt;
&lt;h2 id=&#34;安全性原则security-by-design&#34;&gt;安全性原则（Security by Design）&lt;/h2&gt;
&lt;p&gt;将安全性嵌入架构设计的每个环节，而非事后补丁。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
