<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Algorithm on Duck</title>
    <link>https://duck-dd.github.io/tags/algorithm/</link>
    <description>Recent content in Algorithm on Duck</description>
    <image>
      <title>Duck</title>
      <url>https://duck-dd.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://duck-dd.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- 0.147.8</generator>
    <language>en</language>
    <lastBuildDate>Tue, 24 Jun 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://duck-dd.github.io/tags/algorithm/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>MCMF from scratch</title>
      <link>https://duck-dd.github.io/posts/mcmf/</link>
      <pubDate>Tue, 24 Jun 2025 00:00:00 +0000</pubDate>
      <guid>https://duck-dd.github.io/posts/mcmf/</guid>
      <description>&lt;p&gt;需要深度用到MCMF了，但是摸了摸自己的脑门，脑子里没有公式和演算，只剩几个概念了。
记录一下我从使用的角度理解MCMF问题(东拼西凑)的过程；某些定理的推导，或者复杂度的计算原理，不会深扒；顺便说个感悟，在feed如此丰富的今天，我们还是应该时刻锻炼传统手艺，保留信息检索、过滤、沉淀的能力，否则可能会越走越远(挺简单个问题一开始看偏了太难理解了)。&lt;/p&gt;
&lt;h1 id=&#34;mcmf概念&#34;&gt;MCMF概念&lt;/h1&gt;
&lt;p&gt;Minimum Cost Maximum Flow(最小费用最大流)，满足流量约束前提下，找到源点到汇点的最大流，并使总运输费用最小，数学模型如下：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;有向图 G=(V,E)，每条边 e=(u,v) 包含容量 c(e) 和单位流量费用 w(e)；&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;求源点 s 到汇点 t 的最大流，且总费用 ∑w(e)⋅f(e) 最小，其中 f(e) 为边 e 上的流量&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在解析MCMF之前，我们先一起了解一下他的前身，最大流问题和最小费用流问题。&lt;/p&gt;
&lt;h1 id=&#34;最大流问题&#34;&gt;最大流问题&lt;/h1&gt;
&lt;p&gt;最大流问题是：在一个有向网络中，找到从源点（流量的起点）到汇点（流量的终点）的最大可行流量，同时满足每条边的容量限制；该问题是上世纪五十年代提出的，提出后Lester Ford和Delbert Fulkerson很快给出了解法，也是最大流后续一切发展的理论基础：&lt;code&gt;Ford-Fulkerson&lt;/code&gt;算法。&lt;/p&gt;
&lt;h2 id=&#34;第一印象&#34;&gt;第一印象&lt;/h2&gt;
&lt;p&gt;简单描述，有向有权图，起点&lt;code&gt;s&lt;/code&gt;，终点&lt;code&gt;t&lt;/code&gt;，我们要寻找&lt;code&gt;s-&amp;gt;t&lt;/code&gt;的最大的流量。
那么朴素的第一印象来看，暴力呗，BFS把所有&lt;code&gt;s-&amp;gt;t&lt;/code&gt;路径集合&lt;code&gt;P&lt;/code&gt;全部记录下来，然后逐条路径遍历&lt;code&gt;P&lt;/code&gt;，每一条路径都跑满(路径上最小容量边)，同时更新涉及的边的容量值(这里可能还需要维护一个&lt;code&gt;边-&amp;gt;剩余容量&lt;/code&gt;)，结束后得到一个总的流量值。
提出这个方案后，我们第一时间就会有做简单优化的想法，最朴素的想法就是，对于&lt;code&gt;s&lt;/code&gt;的所有出边都满，或者&lt;code&gt;t&lt;/code&gt;的所有入边都满的情况下，是可以快速退出的；有了快速退出这个想法后，继续思考，&lt;code&gt;P&lt;/code&gt;的遍历顺序是对退出速度有影响的，初始状态下所有边没有消耗，&lt;code&gt;P&lt;/code&gt;中的所有路径按大小排序，从大到小的顺序排序，大点干早点散(每次选择一条路径并记录开销后，也可以对&lt;code&gt;P&lt;/code&gt;剩余的路径重排序，只不过开销比较大)，这样感觉上可以更快结束。
好了，聪明的你，在10s以内经历了上述的思考过程，但你眉头一皱，发现问题并不如此简单，简单的想法并不能确保能找到最大流，例如如下的情况：&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;图1 blocking-flow(黑色数字=容量,红色数字=流量)&#34; loading=&#34;lazy&#34; src=&#34;https://duck-dd.github.io/images/mcmf/mcmf-1.png&#34;&gt;&lt;/p&gt;
&lt;center&gt;图1 blocking-flow(黑色数字=容量,红色数字=流量)&lt;/center&gt;
&lt;p&gt;如图1左(黑色数字=容量,红色数字=流量)，流量=4后，无法再找到路径可通过流量了，但是如图1右，最大流其实是5；这里引入一个概念，&lt;code&gt;阻塞流&lt;/code&gt;，即将所有的路径都阻塞了，无法再新增流量；显而易见，最大流是阻塞流，但阻塞流未必是最大流。
结合这个具体的例子，我们反过来思考为什么我们上面一起想出来的朴素的方法无法确保能够找到最大流呢？我们就结合这一个具体的简单的例子来分析，把整个图1左的中间部分完全忽略，我们只关注起点&lt;code&gt;s&lt;/code&gt;以及他的出边，终点&lt;code&gt;t&lt;/code&gt;以及他的入边，我们碰到了这样一个情况，我们选定了&lt;code&gt;s&lt;/code&gt;的左出边以及&lt;code&gt;t&lt;/code&gt;的右入边并且把它们两个给跑满了，而&lt;code&gt;s&lt;/code&gt;的右出边和&lt;code&gt;t&lt;/code&gt;的左入边他们两个虽然还有容量但是却无法互连(即我们忽略的图的中间的部分没办法把它们连接起来)，而图1右中，&lt;code&gt;t&lt;/code&gt;的右入边跑满的流量不仅仅来自于&lt;code&gt;s&lt;/code&gt;的左出边，还有&lt;code&gt;s&lt;/code&gt;的右出边；ok, you got it! 简单总结，我们的朴素的暴力解法存在的问题是，会存在不合理的路径规划，他会把若干个瓶颈边放到一条路径里，导致多个瓶颈被同时耗尽。当然了，这是我们最通俗的理解，未必描述的是准确的。&lt;/p&gt;
&lt;p&gt;那么如何修正能够确保准确的找到最大流呢？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;再继续暴力的把&lt;code&gt;P&lt;/code&gt;的所有排序都跑一遍，复杂度不太现实(感兴趣可以算算复杂度)&lt;/li&gt;
&lt;li&gt;前面提到问题在于某一些路径的选取不合理，它可能同时触发了多个瓶颈(它本可以少触发一些瓶颈)
&lt;ul&gt;
&lt;li&gt;我们避免使用到不合理的路径？那对路径打分？结合实时的 &lt;code&gt;residual graph(残量图，余量图，残量网络 等)&lt;/code&gt;，对剩余的路径打分，路径消耗掉的边(消耗掉边就是指一条边跑满)越少分越高？也不合理，每一条边价值并不是相等的，例如跨海大桥，这一条边甚至就是整个图的瓶颈；那我们从点入手？每个点都有流入边和流出边，流入和流出在每个点是相等的(&lt;code&gt;s&lt;/code&gt; &lt;code&gt;t&lt;/code&gt;除外)，我们尽量让每个点的流入流出比接近于他的容量的入出比，并对路径的所有点做加权后作为评分？说实话我不知道这个想法合理不合理，但是只要是想要依赖&lt;code&gt;residual graph&lt;/code&gt;来建立评分机制，那么随着迭代次数提升，每次都要更新评分，复杂度应该都是不可接受的&lt;/li&gt;
&lt;li&gt;那么换个思路，我们不在避免使用到不合理路径上下功夫，我们能不能做到随时撤销之前的不合理路径？这样我们就可以大胆的随便搞，一边搞一边修正直至结束；恭喜你，你跟Lester Ford和Delbert Fulkerson可能想到一块去了&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ford-fulkerson&#34;&gt;Ford-Fulkerson&lt;/h2&gt;
&lt;p&gt;一句话描述&lt;code&gt;Ford-Fulkerson&lt;/code&gt;算法，就是在建立&lt;code&gt;residual graph&lt;/code&gt;时，除了更新每条边的残余容量，还会对已经产生的流量建立反向边，下一轮迭代时，反向边也可以使用。
从物理意义上，反向边一开始是没有的，对正向边开销后才会有反向边(容量等于正向边的开销值)，这没有问题；反向边产生开销时，实际效果类似于水流对冲，本来正向走3个水流，反向再走一个水流，其实最终的效果就等于这条水管(边)正向走了2个水流，解释的通，看来可以理解。
但是回到上面我们自己的思考，我们(或者可能只是我)愚蠢的脑袋里想的是要对之前的路径做撤销，当我们在某一轮迭代中使用到了一条反向边时，我们相当于对曾经使用到这条边的某一条路径撤销了一个流量，是这样吗？(如果是这样那就不应该仅是这一条反向边要做开销了，而是应该找到一条路径)
不是的，还是用图1左举例，他的&lt;code&gt;residual graph&lt;/code&gt;如下：&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;图2 图1左的residual graph&#34; loading=&#34;lazy&#34; src=&#34;https://duck-dd.github.io/images/mcmf/mcmf-2.png&#34;&gt;&lt;/p&gt;
&lt;center&gt;图2 图1左部的residual-graph&lt;/center&gt;
&lt;p&gt;图2中，我们可以继续找到这样一条路径&lt;code&gt;s-&amp;gt;v2-&amp;gt;v4-&amp;gt;v1-&amp;gt;v3-&amp;gt;t 流量=1&lt;/code&gt;，其中&lt;code&gt;v4-&amp;gt;v1 流量=1&lt;/code&gt;这一段是我们选中的反向边(我们只对这一条边做了&amp;quot;撤销&amp;quot;)，可以看到，经过这一次修正后，我们实际的路径选择就跟图1右的最大流一致了，眼前的事实证明&lt;code&gt;Ford-Fulkerson&lt;/code&gt;算法是正确的。
那我们尝试解答一下我们刚才产生的那个疑惑，当我们使用了一条反向边的时候，我们究竟在做什么?我是这样理解这个问题的，在&lt;code&gt;residual graph&lt;/code&gt;中，如果我们在一条路径中使用到了一条反向边，那么说明一个问题，在最初的原图中，分别存在&lt;code&gt;s&lt;/code&gt;&amp;mdash;&amp;gt;&lt;code&gt;t&lt;/code&gt;的这样两条路径，分别包含了这条边的两个端点，我们可以把这个图抽象成一个&lt;code&gt;H&lt;/code&gt;型，这条边就是中间的横杠，当我们开销这条边的反向边时，实际是在调整&lt;code&gt;H&lt;/code&gt;型的两条竖线之间的流量分配方式(即合理规划使用&lt;code&gt;H&lt;/code&gt;的左上 左下 右上 右下四部分)，以使得整个&lt;code&gt;H&lt;/code&gt;通过的流量最大。&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Shortest Path</title>
      <link>https://duck-dd.github.io/posts/shortest-path/</link>
      <pubDate>Mon, 23 Jun 2025 00:00:00 +0000</pubDate>
      <guid>https://duck-dd.github.io/posts/shortest-path/</guid>
      <description>&lt;h1 id=&#34;最短路径问题&#34;&gt;最短路径问题&lt;/h1&gt;
&lt;p&gt;寻找有向图中两个顶点之间的路径，使得 &lt;code&gt;路径最短&lt;/code&gt; 或 &lt;code&gt;路径上各边的权重之和最小&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;1-无权图最短路径&#34;&gt;1 无权图最短路径&lt;/h2&gt;
&lt;p&gt;所有边权重相同，最短路径退化为寻找两点间边数最少的路径，&lt;code&gt;BFS&lt;/code&gt;搞定。&lt;/p&gt;
&lt;h2 id=&#34;2-单源最短路径sssp-single-source-shortest-paths&#34;&gt;2 单源最短路径(SSSP, Single-Source Shortest Paths)&lt;/h2&gt;
&lt;h3 id=&#34;21-dijkstra堆优化&#34;&gt;2.1 Dijkstra(堆优化)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;限制：边权非负&lt;/li&gt;
&lt;li&gt;思路：基于已经确定的最短路径，逐步贪心获得源点到所有节点的最短路径&lt;/li&gt;
&lt;li&gt;步骤
&lt;ul&gt;
&lt;li&gt;初始化：
&lt;ul&gt;
&lt;li&gt;源点&lt;code&gt;s&lt;/code&gt;的距离为0，源点&lt;code&gt;s&lt;/code&gt;一步可达的节点距离记为单边的权重，其他节点距离为无穷大(∞)&lt;/li&gt;
&lt;li&gt;所有节点标记为未访问&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;循环处理：
&lt;ul&gt;
&lt;li&gt;从未访问节点中选择距离最小的节点&lt;code&gt;u&lt;/code&gt;，标记为已访问&lt;/li&gt;
&lt;li&gt;对&lt;code&gt;u&lt;/code&gt;的每个邻接节点&lt;code&gt;v&lt;/code&gt;，进行 &lt;strong&gt;松弛操作&lt;/strong&gt;:
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;if distance[v] &amp;gt; distance[u] + weight(u, v):
    distance[v] = distance[u] + weight(u, v)
    predecessor[v] = u  # 记录路径
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;终止条件：所有节点均被访问，或未访问节点的最小距离为 ∞（表示源点无法到达剩余节点）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;优化：使用优先队列(最小堆)维护未访问节点，每次提取最小距离节点的时间为&lt;code&gt;O(logV)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;记录路径：通过记录&lt;code&gt;前驱节点&lt;/code&gt;可以完整还原最短路径，若存在多条最短路径(距离相同但路径不同)，会记录其中一条(具体取决于节点的访问顺序，例如堆优化中相同距离节点的出堆顺序)&lt;/li&gt;
&lt;li&gt;算法正确性理解：未访问节点中排序最靠前的(距离最小的)节点，是基于所有已访问节点推算出来的最近的点，如果再绕行其他节点，那么一定比当前距离更远；相反，如果不是未访问节点里距离最小的点，可能通过其他未访问节点绕行更优，所以每次迭代可以标记这一个点&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;22-bellman-ford&#34;&gt;2.2 Bellman-Ford&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;限制：边权可以为负，但不能有从源点可达的负权环(否则最短路径无意义，长度可无限小)&lt;/li&gt;
&lt;li&gt;思路：通过 &lt;strong&gt;松弛操作&lt;/strong&gt; 逐步逼近从源点到所有其他顶点的最短路径；松弛操作指的是：对于每条边&lt;code&gt;(u, v)&lt;/code&gt;，若从源点到&lt;code&gt;u&lt;/code&gt;的距离 &lt;code&gt;dist[u]&lt;/code&gt;加上边权&lt;code&gt;w(u, v)&lt;/code&gt;小于当前到&lt;code&gt;v&lt;/code&gt;的距离&lt;code&gt;dist[v]&lt;/code&gt;，则更新&lt;code&gt;dist[v]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;步骤
&lt;ul&gt;
&lt;li&gt;初始化：源点距离&lt;code&gt;dist[source] = 0&lt;/code&gt;，其他顶点距离&lt;code&gt;dist[v] = ∞&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;弛操作：对图中所有边进行&lt;code&gt;n-1&lt;/code&gt;轮松弛（&lt;code&gt;n&lt;/code&gt;为顶点数）；因为最短路径最多包含&lt;code&gt;n-1&lt;/code&gt;条边(否则存在环，若为正权环可忽略，负权环则无法求解)&lt;/li&gt;
&lt;li&gt;检测负权环：第&lt;code&gt;n&lt;/code&gt;次松弛时，若仍能更新距离，则说明存在从源点可达的负权环&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;优化：下面的SPFA&lt;/li&gt;
&lt;li&gt;算法正确性理解：&lt;code&gt;n&lt;/code&gt;个节点，那么起点到终点路径最长就是 &lt;code&gt;1-&amp;gt;2-&amp;gt;3-&amp;gt;...-&amp;gt;n&lt;/code&gt; 最多有&lt;code&gt;n-1&lt;/code&gt;跳(边)，否则的话就是有环了(如果是正环，绕行是更差的解，如果是负环，最短路径无解)，算法迭代&lt;code&gt;x&lt;/code&gt;轮，那么&lt;code&gt;x&lt;/code&gt;跳能到达的节点的最短路径都会被优化完成，所以经过&lt;code&gt;n-1&lt;/code&gt;轮迭代，最长的路径也能被优化完成了；如何理解这句话呢，假设一个点距离起点有1条边和3条边两条路径，那么经过三轮迭代，这两条路径之间一定会做PK，择优就会完成&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;23-spfa-shortest-path-faster-algorithm&#34;&gt;2.3 SPFA, Shortest Path Faster Algorithm&lt;/h3&gt;
&lt;p&gt;SPFA其实只是Bellman-Ford的筛选优化，本质相同&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
